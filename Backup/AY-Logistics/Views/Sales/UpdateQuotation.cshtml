@model AYLogistics.Models.SalesModel
@{
    ViewBag.Title = "UpdateQuotation";
}
<div class="involver">
 <fieldset>
   <legend>Update Quotation</legend>
      @Html.HiddenFor(model => model.QuotationId)
      <div class="control pull-left" style="margin-bottom: 19px;">
            @{Html.RenderPartial("../Party/_index", Model.PartyModel);}
     </div>
     <div class="control pull-left space-right" style="margin-bottom: 19px;">
            @{Html.RenderPartial("../Party/_project",Model.ProjectModel);}
     </div>
      <div class="control pull-left" style="margin-bottom: 19px;">
             <label class="form-label"></label>
             <select id="QTType" style="margin-top: -5px;margin-left: 6px;">
                <option value="">--Type--</option>
                <option value="1">SEA</option>
                <option value="2">AIR</option>
            </select>
      </div>
       <div class="control pull-left" style="margin-bottom: 19px;">
             <label class="form-label"></label>
             <select id="QTMode" style="margin-top: -5px;margin-left: 6px;">
                <option value="">-- MODE --</option>
                <option value="1">IMPORT</option>
                <option value="2">EXPORT</option>
            </select>
      </div>
      <div class="control pull-left" style="margin-bottom: 19px;">
         <select class="input-medium" data-bind="options: $root.Currencies, value:CurrencyType, optionsText: 'value', optionsValue: 'key'"></select>
     </div>
     <div class="control pull-right space">
        <p style="color:grey; font-size:18px">Quotation Number: <span data-bind="text: QuotationNumber" style="color:black;"></span></p>
    </div>
    <div class="control pull-left clear" style="width: 422px;">
           <label>Customer</label>
           <div class="control pull-left clear" style="margin-top: -24px;padding-left: 61px;">
               <button id="" type="button" class="btn btn-link" data-bind="click:$root.UpdateCustomer" style="padding-left: 00px;padding-right: 0px;padding-bottom: 0px;padding-top: 0px;"><i class="icon-edit" title="Update customer info"></i></button>
           </div>
                 <input type="text" placeholder="&#xf002; Search..." style="font-family:FontAwesome; width:403px" class="input-medium" data-bind='value:PartyId.value, PartySelect: PartyId , uniqueName: false'/>
    </div>
    <div class="control pull-left" style="width: 472px;">
       <label class="control-label">Project</label>
       <div class="control pull-left" style="margin-top: -24px;padding-left: 43px;">
           <button id="" type="button" class="btn btn-link" data-bind="click:$root.UpdateProject" style="padding-left: 0px;padding-right: 0px;padding-bottom: 0px;padding-top: 0px;"><i class="icon-edit" title="Update project info"></i></button>
        </div>
            <input type="text" placeholder="&#xf002; Search..." style="font-family:FontAwesome;width: 482px;" class="input-medium" data-bind='value:ProjectId.value, ProjectSelect: ProjectId , uniqueName: false'/>
    </div>
 </fieldset>
</div>

<div class="control pull-left"> 
    @*<hr style="height:1px;border-width:0px;color:gray;background-color:gray">*@
    <table data-bind='visible: SalesCategoryItems().length > 0' style="margin-bottom: 8px; margin-top: 30px;">
       <thead>
       </thead>
       <tbody data-bind='foreach: SalesCategoryItems'> 
           <tr class="">
            <td><div style="margin-right: -20px;"><button id="rmbutton" type="button" class="btn btn-danger" data-bind="click:$root.RemoveSubItems" style="padding-left:2px; margin-bottom: 3px;"><i class="icon-remove" title="Remove category and its items"></i></button></div></td>
            <td><div style="margin-top: 8px;"><input type="text" placeholder="&#xf002; Search Category..." style="font-family:FontAwesome;width: 376px; margin-left: 12px;" class="input-medium" data-bind='value:Id.value, SalesCatSelect: Id , enable: EnableStatus'/></div></td>
             @*<td><div style="margin-top: 8px;"><select style = "width: 500px;" data-bind="enable: EnableStatus, options: IdDDList, value:IdDD, optionsText: 'value', optionsValue: 'key', optionsCaption: '--SELECT CATEGORY--'"></select></div></td>*@
           </tr>
           <tr>
               <td colspan="6" class="involver" style="padding-left: 14px;">
                <div class="control pull-left">
                    <a class="btn btn-link" data-bind="click: $data.AddSalesItems" style="padding-left: 0px;"><i class="icon-plus" title="Add item"></i></a>
                </div>
                   <div class="control pull-left">
                   <table>
                        <tr>
                        <th>ITEM / SERVICE</th>
                        <th>QTY</th>
                        <th>UNIT</th>
                        <th>RATE</th>
                        <th>GST</th>
                        <th>TOTAL</th>
                        <th></th>
                      </tr>
                        <tbody data-bind='foreach: $data.SalesItems'>
                            <tr>
                                <td><div><input type="text" placeholder="&#xf002; Search Item..." style="font-family:FontAwesome;width: 376px;" class="input-medium" data-bind='event: { blur: selectionChanged }, click:getCATidon, value:ItemId.value, SalesItemSelect: ItemId , enable: EnableItemEnter'/></div></td>
                                @*<td><div><select style = "width: 376px;" data-bind="enable: EnableItemEnter, event: { blur: selectionChanged }, click:getCATidon, options: ItemIdDDList, value:ItemIdDD, optionsText: 'value', optionsValue: 'key', optionsCaption: '--SELECT ITEM--'"></select></div></td>*@@*Change the function selectionChanged*@
                                <td><input type="text" placeholder="Quantity" class="input-mini required" style="width: 50px;" data-bind='value: Quantity, uniqueName: false'/></td>
                                <td><input type="text" placeholder="Unit" class="input-medium required" style="width: 133px;" data-bind='value: UnitName' readonly ="true"/></td>
                                 @{
                                    var rclass = "readOnly= true";
                                 if (User.IsInRole("Edit"))
                                 {
                                    
                                    rclass = "";     
                                 }
                                }
                                <td><input type="text" placeholder="Rate" class="input-mini required" data-bind='value: UnitPrice, uniqueName: false'  @rclass/></td>
                                <td><input type="text" placeholder="GST" class="input-mini required" style="width: 26px;" data-bind='value: IsGST, uniqueName: false' readOnly="true"/></td>
                                <td><input type="text" placeholder="Total" class="input-small required" data-bind='value: ItemTotal, uniqueName: false' readOnly="true"/></td>
                                <td><input type="text" placeholder="Cur" class="input-mini required" style="width: 46px;" data-bind='value: CurrencyName, uniqueName: false' readOnly="true"/></td>
                                <td><div><a class="" style='color:#FF0000;' data-bind="click:$parent.RemoveSalesItems"><i class="icon-remove" title="Remove item"></i></a></div></td>
                            </tr>
                    </table>
                    </div>
                </td>
           </tr>
      </tbody>
    </table>
</div>


<div class="control pull-right space clear">
<p style="color:blue; font-size:18px">Sub Total: <span data-bind="text: Subtotal" style="color:black;">&nbsp;</span> |
   GST 8%: <span data-bind="text:GST" style="color:black;"></span>
   | Net Total: <span data-bind="text:NetTotal" style="color:black;"></span></p>
</div>
<div>
    <button class="btn btn-primary btn-block" data-bind="click: AddSubItems"><i class="icon-plus"></i></button>
    <button class="btn btn-success btn-block" data-bind="click:Save"><i class="icon-save" ></i> Save (if you modify any info please, click to save)</button>
</div>
<div id="dialog-confirm-quot" title="Quotation" class="display: none;">
    <p id="dialog-message-quot"></p>
</div>



<script type="text/javascript">

    var currentCatID ="";
    $(".chosen_select_L").chosen({
        disable_search_threshold: 5,
        no_results_text: "Oops, nothing found!"
    });


    $(document).ready(function () {
        $(".chosen_select_L").chosen('destroy');
        QT = GetQT($('#QuotationId').val());
        GetSalesCAT($('#QuotationId').val());
        $("#QTType")[0].selectedIndex = QT.Type;
        $("#QTMode")[0].selectedIndex = QT.Mode;
        ERInfo = getExchangeRate();
    });
    var koMM;

    function SalesModel() {
        var self = this;
        self.PartyId = new selectAuto();
        self.PartyId.id = QT.PartyId;
        self.PartyId.value = QT.PartyName;
        self.ProjectId = new selectAuto();
        self.ProjectId.id = QT.ProjectId;
        self.ProjectId.value = QT.ProjectName;
        self.ValidThrough = ko.observable();
        self.DiscountRate = ko.observable();
        self.Type = ko.observable();
        self.Mode = ko.observable();
        self.SalesCategoryItems = ko.observableArray();
        self.POwner = new POwnerModel();
        self.QuotationNumber = ko.observable(QT.QuotationNumber);
        self.QuotationId = ko.observable(QT.QuotationId);
        self.CurrencyType = ko.observable(QT.CurrencyId);
        self.MVR = ko.observable(ERInfo.ExchangeRate);
        self.Currencies = mapDictionaryToArray(@{Html.RenderAction("GetKOCurrencies", "Sales");});

        self.CurrencyType.subscribe(function(){
            if(self.CurrencyType() == 2)
            {
                alert("NOTE! Please Confirm the Exchange rate (USD to MVR) from Management");
            }
        });

        self.AddSubItems = function (data) {
            self.SalesCategoryItems.push(new SalesCategoryModel());
            $(".chosen_select_L").chosen();

        }
        self.RemoveSubItems = function(data){
            self.SalesCategoryItems.remove(data)
             DeleteCATblock(data.selectedCatId());
            $.pnotify({
                title: 'Remove Category',
                text: "Category and its Item has been removed",
                type: "success"
            });
        }
        self.UpdateCustomer = function (data) {
            if (data.PartyId.id > 0) {
                EditParty(data.PartyId.id)
            } else {
                $.pnotify({
                    title: 'Update Customer',
                    text: "Please Select a Customer",
                    type: "error"
                });
            }
        }
        self.UpdateProject  = function(data){
            if(data.ProjectId.id > 0)
            {
                EditProject(data.ProjectId.id)
            }else{
                $.pnotify({
                    title: 'Update Project',
                    text: "Please Select a Project",
                    type: "error"
                });
            }
        }
        self.Subtotal = ko.computed(function() {
            var total = 0;
            $.each(self.SalesCategoryItems(), function() { 
                $.each(this.SalesItems(), function() { 
                    total = total + parseFloat(this.ItemTotal()) 
                });
            });
            return total.toFixed(2);
        });
        self.GSTItemSubtotal = ko.computed(function() {
            var total = 0;
            $.each(self.SalesCategoryItems(), function() { 
                $.each(this.SalesItems(), function() {
                    if(this.IsGST() == 8)
                    {
                        total = total + parseFloat(this.ItemTotal());
                    }
                });
            });
            return total.toFixed(2);
        });
        self.GST = ko.computed(function() {
            var gst = 0;
            var gst =  parseFloat(self.GSTItemSubtotal()) * 0.08;
            return gst.toFixed(2);
        });
        self.NetTotal = ko.computed(function() {
            var Net = 0;
            var Net =  parseFloat(self.Subtotal()) + parseFloat(self.GST());
            //gst = self.Subtotal() + parseFloat(amnt) ;
            return Net.toFixed(2);
        });

        self.Save = function(data){
            if ($("#QTType")[0].selectedIndex == 1) {
                self.Type("SEA");
            }
            if ($("#QTType")[0].selectedIndex == 2) {
                self.Type("AIR");
            }

            if ($("#QTMode")[0].selectedIndex == 1) {
                self.Mode("IMPORT");
            }
            if ($("#QTMode")[0].selectedIndex == 2) {
                self.Mode("EXPORT");
            }

            var SCI = {SalesCategoryItems:self.SalesCategoryItems()};
            var json = JSON.stringify(SCI);
            $.ajax({
                url: '/Sales/UpdateQuotaion',
                type: 'POST',
                dataType: 'json',
                data: ko.toJSON({SM: koMM}),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.Status == "success") {
                         $("#dialog-message-quot").text("Quotation has been Modified");
                        $( "#dialog-confirm-quot" ).dialog({
                            resizable: false,
                            height:180,
                            modal: true,
                            buttons: {
                                "Close": function() {
                                    $( this ).dialog( "close" );
                                   // window.location = '../Sales/SearchQuotation'
                                },
                                "Print":function(){
                                    $.download("../Sales/PrintQuotation", { QuotationId: QT.QuotationId}, "POST");    
                                }
                            }
                        });
                    } else {
                        $.pnotify({
                            title: 'QUOTATION',
                            text: result.Message,
                            type: result.Status
                        });
                    }
                }
            });
        }
    }


    function SalesCategoryModel(){
        var self = this;
        self.selectedCatId = ko.observable();
        self.Id = new selectAuto();
        self.IdDD = ko.observable();
        self.SalesItems = ko.observableArray();
        self.EnableStatus = ko.observable(true);
        self.IdDDList = mapDictionaryToArray(@{Html.RenderAction("GetCategoriesKO_ALL", "Sales");});
        self.AddSalesItems = function (data) {
            self.SalesItems.push(new SalesItemModel());
            $.each(self.SalesItems(), function() { 
                if(this.ItemId.id.length == 0)
                {
                    this.EnableItemEnter(true);
                }
               /* if(this.ItemIdDD.length == 0)
                {
                    this.EnableItemEnter(true);
                }*/
               currentCatID = data.Id.id;
                /* currentCatID = data.IdDD();*/
            });
               $(".chosen_select_L").chosen();

        }
        self.RemoveSalesItems = function(data){
            self.SalesItems.remove(data)
            DeleteITEMonly(data.selectedITEMid());
            $.pnotify({
                title: 'Remove Items',
                text: "Item has been removed",
                type: "success"
            });
        }

    }
    function SalesItemModel(){
        var self = this;
        self.ItemId = new selectAuto();
        self.ItemIdDD = ko.observable();
        self.UnitName = ko.observable();
        self.UnitPrice = ko.observable(0.00);
        self.Quantity = ko.observable(0);
       // self.ItemTotal = ko.observable(0.00);
        self.CurrencyName = ko.observable();
        self.IsGST = ko.observable();
        self.selectedITEMid = ko.observable();
        self.EnableItemEnter = ko.observable(false);
        /*self.ItemIdDDList = mapDictionaryToArray*/ self.ItemIdDDList = mapDictionaryToArrayList(@{Html.RenderAction("GetSalesItemKO_ALL", "Sales");});

        self.selectionChanged = (function(event){
            self.Quantity(0);
            if(self.ItemId.id > 0)
           /* if(self.ItemIdDD() > 0)*/
            {
                 $.getJSON("../Sales/GetItemRates",{ItemId:self.ItemId.id},function(data){
                /*$.getJSON("../Sales/GetItemRates",{ItemId:self.ItemIdDD()},function(data){*/
                    if(koMM.CurrencyType() == 2)
                    {
                        self.UnitPrice(data.UnitPrice  * koMM.MVR());
                        self.CurrencyName('MVR');
                    }else{
                        self.UnitPrice(data.UnitPrice.toFixed(2));
                        self.CurrencyName(data.Currency);
                    }
                    self.UnitName(data.UnitName);
                    self.IsGST(data.IsGST);
                });
            }
        });
        self.getCATidon = (function(event){//set catergory id for new items search
            $.getJSON("../Sales/GetItemRates",{ItemId:self.ItemId.id},function(data){
            /*  $.getJSON("../Sales/GetItemRates",{ItemId:self.ItemIdDD()},function(data){*/
                currentCatID = data.SalesCategoryId;
            });
        });

        self.ItemTotal = ko.computed(function(){
            var total = 0.00;
            total = self.Quantity() * parseFloat(self.UnitPrice());
            return total.toFixed(2);  
        });

    }


    function GetQT(QuotId){
        var url = "@Url.Action("GetQT", "Sales")";
            var results ;
            var flag = 0;
            var param = {QuotId:QuotId};               
            var data = JSON.stringify(param);   
            $.ajax({
                type: "POST",
                url: url,
                async:false,
                contentType: "application/json; charset=utf-8",
                data: data,
                success: function(result){
                    results = result;
                },
                dataType: "json"
            });
            return results;
    }

    function GetSalesCAT(QuotId){
        $.getJSON("../Sales/GetCAT",{QuotId:QuotId},function(data){
            for(var i=0; i <data.length;i++)
            {
                var items = new SalesCategoryModel();
                items.selectedCatId(data[i].Id);
                items.Id.id(data[i].SalesCategoryId); items.Id.value(data[i].SalesCATName);
                items.IdDD(data[i].SalesCategoryId);
                items.EnableStatus(false);
                koMM.SalesCategoryItems.push(items)
                GetSITEMS(data[i].Id,[i]);
            }
        });
    }

    function GetSITEMS(SCATid,catCount){
        $.getJSON("../Sales/GetSITEMS",{SCATid:SCATid},function(data){
           
            for(var k=0; k <data.length;k++)
            {
                var items = new SalesItemModel();
                if(koMM.CurrencyType() == 2)
                {
                    items.UnitPrice(data[k].UnitPrice * koMM.MVR());
                    items.CurrencyName('MVR');
                }else{
                    items.UnitPrice(data[k].UnitPrice);
                    items.CurrencyName(data[k].CurrencyName);
                }
                items.ItemId.id(data[k].SalesItemId); items.ItemId.value(data[k].SalesItemName);
                items.ItemIdDD(data[k].SalesItemId);
                items.UnitName(data[k].UnitName);
                items.IsGST(data[k].IsGST);
                items.Quantity(data[k].Quantity);
                items.selectedITEMid(data[k].selectedITEMid);
                koMM.SalesCategoryItems()[catCount].SalesItems.push(items);
            }
        });
    }

    function DeleteCATblock(SelectedCATid){
        var url = "@Url.Action("DeleteCATblock", "Sales")";
              var results ;
              var flag = 0;
              var param = {SelectedCATid:SelectedCATid};               
              var data = JSON.stringify(param);   
              $.ajax({
                  type: "POST",
                  url: url,
                  async:false,
                  contentType: "application/json; charset=utf-8",
                  data: data,
                  success: function(result){
                      results = result;
                  },
                  dataType: "json"
              });
              return results;
    }

    function DeleteITEMonly(ItemPriId){
        var url = "@Url.Action("DeleteITEMonly", "Sales")";
            var results ;
            var flag = 0;
            var param = {ItemPriId:ItemPriId};               
            var data = JSON.stringify(param);   
            $.ajax({
                type: "POST",
                url: url,
                async:false,
                contentType: "application/json; charset=utf-8",
                data: data,
                success: function(result){
                    results = result;
                },
                dataType: "json"
            });
            return results;
    }

    function getExchangeRate(){
        var url = "@Url.Action("getExchangeRate", "Sales")";
            var results ;
            var flag = 0;               
            var data = JSON.stringify();   
            $.ajax({
                type: "POST",
                url: url,
                async:false,
                contentType: "application/json; charset=utf-8",
                data: data,
                success: function(result){
                    results = result;
                },
                dataType: "json"
            });
            return results;
    }

    function mapDictionaryToArray(dictionary) {
        var result = [];
        for (var key in dictionary) {
            if (dictionary.hasOwnProperty(key)) {
                result.push({ key: key, value: dictionary[key] });
            }  
        } 
        return result;
    }

    function mapDictionaryToArrayList(dictionaryList) {
        var result = [];
       // console.log(dictionaryList);
        for (var i = 0; i < dictionaryList.length; i++) {
            for (var key in dictionaryList[i]) {
                if (dictionaryList[i].hasOwnProperty(key)) {
                    result.push({ key: key, value: dictionaryList[i][key] });
                }  
            }
        }
        return result;
    }

    function selectAuto(){
        var self = this;
        self.value = ko.observable();
        self.id = ko.observable();
    }

    ko.bindingHandlers.PartySelect = {
        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called when the binding is first applied to an element
            // Set up any initial state, event handlers, etc. here

            $(element).autocomplete({
                source: function( request, response ) {
                    $.ajax( {
                        url: "../Party/SearchParty",
                        dataType: "json",
                        data:{ 'query':request.term ,"type":1, subtype: 2 },
                        success: function( data ) {
                            var test = [];



                            // pass a function to map
                          const map1 = data.map(x => ({
                              id:x.Id,
                              label:x.Name,
                              value:x.Name
                          }));

                            console.log(map1);
                            response( map1 );
                        }
                    } );
                },
                minLength: 2,
                select: function( event, ui ) {
       
                    valueAccessor().id =  ui.item.id;
                    valueAccessor().value =  ui.item.value;
                    console.log(valueAccessor());    
                    console.log(viewModel);
                    console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
                }
            } );
        },
        update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called once when the binding is first applied to an element,
            // and again whenever any observables/computeds that are accessed change
            // Update the DOM element based on the supplied values here.
        }
    };

    //Project Selcet Function
    ko.bindingHandlers.ProjectSelect = {
        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called when the binding is first applied to an element
            // Set up any initial state, event handlers, etc. here

            $(element).autocomplete({
                source: function( request, response ) {
                    $.ajax( {
                        url: "../Job/SearchProject",
                        dataType: "json",
                        data:{ 'query':request.term ,"type":1, subtype: 2 },
                        success: function( data ) {
                            var test = [];



                            // pass a function to map
                          const map1 = data.map(x => ({
                              id:x.Id,
                              label:x.Name,
                              value:x.Name
                          }));

                            console.log(map1);
                            response( map1 );
                        }
                    } );
                },
                minLength: 2,
                select: function( event, ui ) {
       
                    valueAccessor().id =  ui.item.id;
                    valueAccessor().value =  ui.item.value;
                    console.log(valueAccessor());    
                    console.log(viewModel);
                    console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
                }
            } );
        },
        update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called once when the binding is first applied to an element,
            // and again whenever any observables/computeds that are accessed change
            // Update the DOM element based on the supplied values here.
        }
    };

    //SalesCategory Selcet Function
    ko.bindingHandlers.SalesCatSelect = {
        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called when the binding is first applied to an element
            // Set up any initial state, event handlers, etc. here

            $(element).autocomplete({
                source: function( request, response ) {
                    $.ajax( {
                        url: "../Sales/SearchCategories",
                        dataType: "json",
                        data:{ 'query':request.term ,"type":1, subtype: 2 },
                        success: function( data ) {
                            var test = [];



                            // pass a function to map
                          const map1 = data.map(x => ({
                              id:x.Id,
                              label:x.Name,
                              value:x.Name
                          }));

                            console.log(map1);
                            response( map1 );
                        }
                    } );
                },
                minLength: 2,
                select: function( event, ui ) {
       
                    valueAccessor().id =  ui.item.id;
                    valueAccessor().value =  ui.item.value;
                    console.log(valueAccessor());    
                    console.log(viewModel);
                    console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
                    currentCatID = ui.item.id;
                }
            } );
        },
        update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called once when the binding is first applied to an element,
            // and again whenever any observables/computeds that are accessed change
            // Update the DOM element based on the supplied values here.
        }
    };


    //SalesItem Select Function
    ko.bindingHandlers.SalesItemSelect = {
        init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called when the binding is first applied to an element
            // Set up any initial state, event handlers, etc. here

            $(element).autocomplete({
                source: function( request, response ) {
                    $.ajax( {
                        url: "../Sales/SearchSalesItem",
                        dataType: "json",
                        data:{ 'query':request.term ,"type":1, subtype: 2, SCATid:currentCatID  },
                        success: function( data ) {
                            var test = [];



                            // pass a function to map
                          const map1 = data.map(x => ({
                              id:x.Id,
                              label:x.Name,
                              value:x.Name
                          }));

                            console.log(map1);
                            response( map1 );
                        }
                    } );
                },
                minLength: 2,
                select: function( event, ui ) {
       
                    valueAccessor().id =  ui.item.id;
                    valueAccessor().value =  ui.item.value;
                    console.log(valueAccessor());    
                    console.log(viewModel);
                    console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
                }
            } );
        },
        update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
            // This will be called once when the binding is first applied to an element,
            // and again whenever any observables/computeds that are accessed change
            // Update the DOM element based on the supplied values here.
        }
    };
    


    $(function () {
        koMM = new SalesModel()
        ko.applyBindings(koMM);
       // init();
    })
    function init() {
        koMM.AddSubItems();
    }
</script>
