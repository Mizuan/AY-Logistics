@using System.Web.Security;
@using AYLogistics.Models
@{
    ViewBag.Title = "Advance Search";
}

<div class="min-h-screen bg-gray-100 p-6">
    <h2 class="text-2xl font-bold text-gray-800 mb-6">Search Jobs</h2>

    <!-- Search Section -->
    <div class="bg-white p-4 rounded-lg shadow mb-6">
        <div class="flex flex-wrap gap-4">
            <!-- Start Date -->
            <div class="flex flex-col">
                <label class="text-sm font-medium text-gray-700 mb-1">From</label>
                <input type="date" id="StartDate" class="w-40 px-3 py-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" />
            </div>
            <!-- End Date -->
            <div class="flex flex-col">
                <label class="text-sm font-medium text-gray-700 mb-1">To</label>
                <input type="date" id="EndDate" class="w-40 px-3 py-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" />
            </div>
            <!-- Search Query -->
            <div class="flex-grow">
                <label class="text-sm font-medium text-gray-700 mb-1">Search</label>
                <input type="text" id="query" class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" placeholder="Job No / BL / MBL / AWBL / MAB / Voyage No / Vessel Name" />
            </div>
            <!-- Buttons -->
            <div class="flex items-end gap-2">
                <button id="searchBtn" class="rounded-full size-10 bg-blue-500 text-white rounded shadow hover:bg-blue-600 focus:outline-none">
                    <i class="fas fa-search"></i>
                </button>
                <button id="filterByDateBtn" class="rounded-full size-10 bg-green-500 text-white rounded shadow hover:bg-green-600 focus:outline-none">
                    <i class="fas fa-calendar"></i>
                </button>
                <button id="resetBtn" class="rounded-full size-10 bg-gray-500 text-white rounded shadow hover:bg-gray-600 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Cards Section -->
    <div id="jobCards" class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <!-- Cards will be dynamically injected here -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center space-x-2">
        <!-- Pagination buttons will be dynamically injected here -->
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        const itemsPerPage = 10;
        let currentPage = 1;
        let jobsData = [];

        // Initialize default date range to today's date
        const today = new Date().toISOString().split('T')[0];
        $('#StartDate').val(today);
        $('#EndDate').val(today);

        // Load initial jobs data
        fetchJobsByDate();

        // Search button click event
        $('#searchBtn').on('click', function () {
            const query = $('#query').val().trim();
            if (query) {
                fetchJobsByQuery(query);
            }
        });

        // Filter by date button click event
        $('#filterByDateBtn').on('click', function () {
            fetchJobsByDate();
        });

        // Reset button click event
        $('#resetBtn').on('click', function () {
            $('#query').val('');
            $('#StartDate').val(today);
            $('#EndDate').val(today);
            fetchJobsByDate();
        });

        // Fetch jobs by query
        function fetchJobsByQuery(query) {
            $.ajax({
                url: `/Job/FilterJobBy/`,
                type: 'GET',
            data: { query: query },
            success: function (response) {
                jobsData = response.aaData || [];
                currentPage = 1;
                renderJobs(currentPage);
                renderPagination(jobsData.length, itemsPerPage);
            },
            error: function () {
                $('#jobCards').html('<p class="text-red-500">Failed to load jobs by search query.</p>');
            }
        });
    }

    function formatDateForServer(dateStr) {
    const date = new Date(dateStr);
    const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero to month
    const day = date.getDate().toString().padStart(2, '0'); // Add leading zero to day
    const year = date.getFullYear();
        return `${month}/${day}/${year}`; // Format as MM/dd/yyyy
    }

    // Fetch jobs by date range
    function fetchJobsByDate() {
        const startDate = formatDateForServer($('#StartDate').val());
        const endDate = formatDateForServer($('#EndDate').val());

        $.ajax({
            url: `/Job/FilterJob/`,
            type: 'GET',
        data: { StartDate: startDate, EndDate: endDate },
        success: function (response) {
            jobsData = response.aaData || [];
            currentPage = 1;
            renderJobs(currentPage);
            renderPagination(jobsData.length, itemsPerPage);
        },
        error: function () {
            $('#jobCards').html('<p class="text-red-500">Failed to load jobs by date filter.</p>');
        }
    });
    }


    // Render job cards
    function renderJobs(page) {
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const visibleJobs = jobsData.slice(startIndex, endIndex);

        const container = $('#jobCards');
        container.empty();

        if (visibleJobs.length === 0) {
            container.html('<p class="text-gray-500">No jobs found.</p>');
            return;
        }

        visibleJobs.forEach(job => {
            const card = `
                <div class="bg-white p-4 rounded-lg shadow hover:shadow-md transition">
                    <h3 class="text-lg font-bold text-gray-800 mb-2">${job.JobNo}</h3>
                    <p class="text-sm text-gray-600"><strong>Registration Date:</strong> ${job.RegistrationDate}</p>
                    <p class="text-sm text-gray-600"><strong>Customer:</strong> ${job.Customer}</p>
                    <p class="text-sm text-gray-600"><strong>Vessel Name:</strong> ${job.VesselName}</p>
                    <p class="text-sm text-gray-600"><strong>Recent Status:</strong> ${job.RecentStatus}</p>
                    <div class="mt-4 flex gap-2">
                        <a href="../Job/EditJob?JobId=${job.Id}" class="p-2 bg-blue-500 text-white rounded-full hover:bg-blue-600" title="Edit">
                            <i class="fas fa-edit"></i>
                        </a>
                        <button onclick="attachOpen(${job.ShipmentId}, ${job.HBLId})" class="p-2 bg-gray-500 text-white rounded-full hover:bg-gray-600" title="Attachments">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <button onclick="shipmentStatusOpen(${job.ShipmentId}, ${job.HBLId})" class="p-2 bg-green-500 text-white rounded-full hover:bg-green-600" title="Status">
                            <i class="fas fa-info-circle"></i>
                        </button>
                    </div>
                </div>
            `;
        container.append(card);
    });
    }

    // Render pagination with dots
    function renderPagination(totalItems, itemsPerPage) {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const paginationContainer = $('#pagination');
        paginationContainer.empty();

        if (totalPages <= 1) return;

        let paginationHtml = '';

        // Previous button
        paginationHtml += `<button onclick="changePage(${currentPage - 1})" class="px-4 py-2 rounded ${currentPage === 1 ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === 1 ? 'disabled' : ''}>
            <i class="fas fa-chevron-left"></i>
        </button>`;

        // Page numbers with dots
        for (let i = 1; i <= totalPages; i++) {
            if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                paginationHtml += `
                    <button onclick="changePage(${i})" class="px-4 py-2 rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}">
                        ${i}
    </button>`;
    } else if (i === currentPage - 3 || i === currentPage + 3) {
        paginationHtml += `<span class="px-2">...</span>`;
    }
    }

    // Next button
    paginationHtml += `<button onclick="changePage(${currentPage + 1})" class="px-4 py-2 rounded ${currentPage === totalPages ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === totalPages ? 'disabled' : ''}>
        <i class="fas fa-chevron-right"></i>
    </button>`;

    paginationContainer.html(paginationHtml);
    }

    // Change the page
    window.changePage = function (page) {
        if (page < 1 || page > Math.ceil(jobsData.length / itemsPerPage)) return;
        currentPage = page;
        renderJobs(page);
        renderPagination(jobsData.length, itemsPerPage);
    };

    // Additional helper functions
    window.attachOpen = function (shipmentId, hblId) {
        alert(`Open attachments for Shipment: ${shipmentId}, HBL: ${hblId}`);
    };

    window.shipmentStatusOpen = function (shipmentId, hblId) {
        alert(`Open shipment status for Shipment: ${shipmentId}, HBL: ${hblId}`);
    };
    });
</script>
