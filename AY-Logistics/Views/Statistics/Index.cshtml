@using System.Web.Security;
@using AYLogistics.Models
@{
    ViewBag.Title = "Index";
}

<div class="max-w-7xl mx-auto px-4 py-6">
    <h2 class="text-2xl font-semibold mb-4">Reports</h2>

    <!-- Filter Section -->
    <div class="bg-white rounded-lg shadow p-6 mb-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">From</label>
                <input type="date" id="StartDate" class="w-full p-2 rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">To</label>
                <input type="date" id="EndDate" class="w-full p-2 rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Search</label>
                <input type="text" id="searchQuery" placeholder="Search by manifest, job, vessel..." class="w-full p-2 rounded-md border border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
            </div>
        </div>
        <div class="flex justify-end gap-2 mt-4">
            <button id="searchReports" class="px-4 py-2 bg-blue-500 text-white rounded-md shadow hover:bg-blue-600 focus:outline-none">
                Filter
            </button>
            <button id="resetFilter" class="px-4 py-2 bg-gray-500 text-white rounded-md shadow hover:bg-gray-600 focus:outline-none">
                Reset
            </button>
        </div>
    </div>

    <!-- Reports Section -->
    <div id="reports-container" class="space-y-4">
        <!-- Cards will be dynamically inserted here -->
    </div>

    <!-- Pagination Section -->
    <div id="pagination-container" class="mt-6 flex justify-center space-x-2">
        <!-- Pagination buttons will be dynamically inserted here -->
    </div>
</div>

<script>
    $(document).ready(function () {
        const itemsPerPage = 5;
        let currentPage = 1;
        let reportsData = [];

        // Set today's date by default
        const today = new Date().toISOString().split('T')[0];
        $('#StartDate').val(today);
        $('#EndDate').val(today);

        // Load initial data
        fetchReports();

        // Filter button click
        $('#searchReports').click(function () {
            fetchReports();
        });

        // Reset button click
        $('#resetFilter').click(function () {
            $('#StartDate').val(today);
            $('#EndDate').val(today);
            $('#searchQuery').val('');
            fetchReports();
        });

        // Fetch reports data
        function fetchReports() {
            const startDate = $('#StartDate').val();
            const endDate = $('#EndDate').val();
            const query = $('#searchQuery').val().trim();

            $.ajax({
                url: `/Statistics/AllData/?StartDate=${startDate}&EndDate=${endDate}`,
                type: 'POST',
                dataType: 'json',
                success: function (response) {
                    const filteredData = response.aaData.filter(item => {
                        if (!query) return true;
                        const searchString = `${item.Number || ''} ${item.JobNo || ''} ${item.VesselName || ''}`.toLowerCase();
                        return searchString.includes(query.toLowerCase());
                    });

                    reportsData = filteredData;
                    currentPage = 1; // Reset to first page
                    renderReports(currentPage);
                    renderPagination(reportsData.length, itemsPerPage);
                },
                error: function () {
                    alert('Failed to fetch reports data.');
                }
            });
        }

        // Render reports as full-width cards
        function renderReports(page) {
            const container = $('#reports-container');
            container.empty();

            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const visibleReports = reportsData.slice(startIndex, endIndex);

            if (visibleReports.length === 0) {
                container.html('<p class="text-gray-500 text-center">No reports found.</p>');
                return;
            }

            visibleReports.forEach(report => {
                const card = `
                    <div class="bg-white border rounded-lg shadow p-6">
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                                <p><strong>Manifest #:</strong> ${report.Number || '-'}</p>
                                <p class="text-sm">Job #: ${report.JobNo || '-'}</p>
                                <p class="text-sm">Vessel: ${report.VesselName || '-'}</p>
                                <p class="text-sm">Voyage: ${report.VoyageNo || '-'}</p>
                                <p class="text-sm">House BL: ${report.HouseBL || '-'}</p>
                            </div>
                            <div>
                                <p class="text-sm">Date Arrival: ${report.DateArrival || '-'}</p>
                                <p class="text-sm">Date Discharge: ${report.DateDischarge || '-'}</p>
                                <p class="text-sm">Date Registration: ${report.RegistrationDate || '-'}</p>
                                <p class="text-sm">Date Clearance: ${report.ClearanceDate || '-'}</p>
                                <p class="text-sm">Date Shipper: ${report.Shipper || '-'}</p>
                            </div>
                            <div>
                                <p class="text-sm">Port Loading: ${report.PortOfLoading || '-'}</p>
                                <p class="text-sm">Port Unloading: ${report.PortOfUnloading || '-'}</p>
                                <p class="text-sm">Delivery Place: ${report.DeliveryPlace || '-'}</p>
                                <p class="text-sm">Customer: ${report.Customer || '-'}</p>
                                <p class="text-sm">Notify Party: ${report.NotifyParty || '-'}</p>
                            </div>
                        </div>
                    </div>
                `;
                container.append(card);
            });
        }

        // Render pagination
        function renderPagination(totalItems, itemsPerPage) {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const paginationContainer = $('#pagination-container');
            paginationContainer.empty();

            if (totalPages <= 1) return;

            // Previous button
            paginationContainer.append(`
                <button onclick="changePage(${currentPage - 1})" class="px-4 py-2 rounded ${currentPage === 1 ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === 1 ? 'disabled' : ''}>
                    Previous
                </button>
            `);

            // Page buttons
            for (let i = 1; i <= totalPages; i++) {
                paginationContainer.append(`
                    <button onclick="changePage(${i})" class="px-4 py-2 rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}">
                        ${i}
                    </button>
                `);
            }

            // Next button
            paginationContainer.append(`
                <button onclick="changePage(${currentPage + 1})" class="px-4 py-2 rounded ${currentPage === totalPages ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === totalPages ? 'disabled' : ''}>
                    Next
                </button>
            `);
        }

        // Change page
        window.changePage = function (page) {
            const totalPages = Math.ceil(reportsData.length / itemsPerPage);
            if (page < 1 || page > totalPages) return;
            currentPage = page;
            renderReports(page);
            renderPagination(reportsData.length, itemsPerPage);
        };
    });
</script>
