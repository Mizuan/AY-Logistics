@model AYLogistics.Models.JobDocumentVM

@{
    Layout = "~/Views/Shared/_blank2.cshtml";
    ViewBag.Title = "Documents";
}

<div class="max-w-7xl mx-auto px-4 py-6">
    <div class="text-2xl font-bold text-gray-800 mb-4">
        @ViewBag.Title
    </div>

    <div class="mb-4">
        <button 
            onclick="history.back()" 
            class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600 focus:outline-none"
        >
            Back
        </button>
    </div>
    
    <div id="JobDocumentVM" class="space-y-6">
        <!-- Add Document Form -->
        <div class="p-6 bg-white shadow rounded-lg">
            <h2 class="text-lg font-semibold text-gray-700 mb-4">Add New Document</h2>
            @using (Html.BeginForm("AddMultipleDocument", "JobDocument", FormMethod.Post, new { enctype = "multipart/form-data", id = "frmAddDoc" }))
            {
                @Html.HiddenFor(m => m.ShipmentId, new { value = ViewBag.ShipmentId })
                @Html.Hidden("specificBLid", (object)ViewBag.specificBLid)

                <div class="space-y-4">
                    <div>
                        @Html.TextBoxFor(m => m.Name, new { placeholder = "Name of Document", @class = "border-gray-300 rounded p-2 w-full focus:ring focus:ring-blue-300" })
                    </div>
                    <div>
                        @Html.DropDownListFor(mm => mm.DocumentType, new SelectList(AYLogistics.Models.JobDocumentVM.GetJobDocumentTypes(), "Key", "Value"), new { @class = "border-gray-300 rounded p-2 w-full focus:ring focus:ring-blue-300" })
                    </div>
                    <div>
                        @Html.DropDownListFor(mm => mm.HouseBLId, new SelectList(AYLogistics.Models.JobDocumentVM.GetBLList(ViewBag.ShipmentId, ViewBag.specificBLid), "Key", "Value", ViewBag.specificBLid), "--Select BL--", new { @class = "border-gray-300 rounded p-2 w-full focus:ring focus:ring-blue-300" })
                    </div>
                    <div>
                        @Html.TextBoxFor(m => m.Description, new { placeholder = "Description (optional)", @class = "border-gray-300 rounded p-2 w-full focus:ring focus:ring-blue-300" })
                    </div>
                    <div>
                        @Html.TextBoxFor(m => m.files, new { @type = "file", @multiple = "multiple", @class = "border-gray-300 rounded p-2 w-full focus:ring focus:ring-blue-300" })
                    </div>
                    <div class="text-right">
                        <input type="submit" value="Upload" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600" />
                    </div>
                </div>
            }
        </div>

        <!-- Documents Table -->
        <div class="overflow-x-auto bg-white shadow rounded-lg p-6">
            <table class="w-full text-sm text-left border-collapse">
                <thead class="bg-gray-100 border-b">
                    <tr>
                        <th class="hidden">Id</th>
                        <th class="py-2 px-4 font-semibold text-gray-700">Document Name</th>
                        <th class="py-2 px-4 font-semibold text-gray-700">Type of Document</th>
                        <th class="py-2 px-4 font-semibold text-gray-700">BL</th>
                        <th class="py-2 px-4 font-semibold text-gray-700">Description</th>
                        <th class="py-2 px-4 font-semibold text-gray-700 text-right">Actions</th>
                    </tr>
                </thead>
                <tbody data-bind="foreach: JobDocuments" class="divide-y">
                    <!-- Read-Only Mode -->
                    <tr data-bind="ifnot: edit" class="hover:bg-gray-50">
                        <td class="hidden" data-bind="text: Id"></td>
                        <td class="py-2 px-4 break-words max-w-xs">
                            <a href="#" target="_blank" data-bind="text: Name, click: $root.download" class="text-blue-600 hover:underline"></a>
                        </td>
                        <td class="py-2 px-4">
                            <select disabled="disabled" class="border border-gray-300 rounded p-1 w-full" data-bind="options: $root.DocumentTypes, value:DocumentType, optionsText: 'value', optionsValue: 'key'"></select>
                        </td>
                        <td class="py-2 px-4">
                            <select disabled="disabled" class="border border-gray-300 rounded p-1 w-full" data-bind="options: $root.BLList, value:HouseBLId, optionsText: 'value', optionsValue: 'key', optionsCaption: '--Under Shipment--'"></select>
                        </td>
                        <td class="py-2 px-4" data-bind="text: Description"></td>
                        <td class="py-2 px-4 text-right">
                            <div class="flex justify-end space-x-2">
                                <a href="#" data-bind="click: $root.edit" class="text-blue-500 hover:text-blue-700">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="#" data-bind="click: $root.remove" class="text-red-500 hover:text-red-700">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                    <!-- Edit Mode -->
                    <tr data-bind="if: edit" class="bg-gray-50 hover:bg-gray-100">
                        <td class="py-2 px-4">
                            <input type="text" data-bind="value: Name" class="border border-gray-300 rounded p-1 w-full">
                        </td>
                        <td class="py-2 px-4">
                            <select data-bind="options: $root.DocumentTypes, value:DocumentType, optionsText: 'value', optionsValue: 'key'" class="border border-gray-300 rounded p-1 w-full"></select>
                        </td>
                        <td class="py-2 px-4">
                            <select data-bind="options: $root.BLList, value:HouseBLId, optionsText: 'value', optionsValue: 'key', optionsCaption: '--Under Shipment--'" class="border border-gray-300 rounded p-1 w-full"></select>
                        </td>
                        <td class="py-2 px-4">
                            <input type="text" data-bind="value: Description" class="border border-gray-300 rounded p-1 w-full">
                        </td>
                        <td class="py-2 px-4 text-right">
                            <div class="flex justify-end space-x-2">
                                <a href="#" data-bind="click: $root.cancel" class="text-gray-500 hover:text-gray-700">
                                    <i class="fas fa-times"></i>
                                </a>
                                <a href="#" data-bind="click: $root.save" class="text-green-500 hover:text-green-700">
                                    <i class="fas fa-save"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>





@*To Display Removed Documents*@
@*@if (User.IsInRole("Admin"))
{
<div data-bind="visible: JobRemovedDocuments().length > 0">
<h4 style="color:red">Rejected Documents!</h4>
    <table style="clear:both;" class="grtable">
        <thead >
            <tr>
                <th class="hidden">Id</th>
                <th style="width:500px">Document Name</th>
                <th>Type of Document</th>
                <th style="width:500px">Description</th>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: JobRemovedDocuments">
            
            <tr data-bind="ifnot: edit">
                <td class="hidden" data-bind="text: Id"></td>
                <td><a href="#" target="_blank" data-bind="text: Name, click: $root.download" class="eng"></a></td>
                <td><select disabled="disabled" class="lang" data-bind="options: $root.DocumentTypes, value:DocumentType, optionsText: 'value', optionsValue: 'key'"></select></td>
                <td data-bind="text: Description" class="eng"></td>
                <td style="width: 65px;">
                     <div class="btn-group">
                        <a href="#" class="btn btn-mini btn-success" data-bind="click: $root.restore">
                           <i class="icon-undo icon-2"></i>
                        </a>
                    </div>
                </td>
            </tr>
            <tr data-bind="if: edit">
                <td><input type="text" data-bind="value: Name" class="lang"/></td>
                <td><select data-bind="options: $root.DocumentTypes, value:DocumentType, optionsText: 'value', optionsValue: 'key'" class="lang"></select></td>
                <td><input type="text" data-bind="value: Description" class="lang"/></td>
                <td style="width:106px;">
                    <div class="btn-group">
                    <a href="#" data-bind="click: $root.cancel" class="btn btn-mini btn-info lang">
                        <i class="icon-remove"></i>
                    </a>
                    <a href="#" data-bind="click: $root.save" class="btn btn-mini btn-warning lang">
                        <i class="icon-edit"></i>
                    </a>
                  </div>  
                  </td>
            </tr>
        </tbody>
    </table>
    </div>
}*@
</div>

    <script src="@Url.Content("~/Scripts/knockout-2.2.0.debug.js")" type="text/javascript"></script>@* knockout.js*@
    <script src="@Url.Content("~/Scripts/knockout.mapping-latest.debug.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/jquery.form.js")" type="text/javascript"></script>@* ajax file upload*@
    <script type="text/javascript">

        var kovm;

        $(".chosen_select_L").chosen({
            disable_search_threshold: 5,
            no_results_text: "Oops, nothing found!"
        });

        $(function () {
            kovm = new JobDocumentVM();
            ko.applyBindings(kovm, $("#JobDocumentVM")[0]);

            $(function () {
                $("#progressbar").progressbar({
                    value: 0
                });
                //get value and name from document type onchange
                $("#DocumentType").change(function () {
                    $("#Name").val($(this).find("option:selected").text());
                    // var selectedValue = $(this).val();
                });
            });
            $("#frmAddDoc").ajaxForm({
                beforeSend: function () {
                    $("#progressbar").progressbar({
                        value: 0
                    });
                },
                uploadProgress: function (event, position, total, percentComplete) {
                    $("#progressbar").progressbar({
                        value: percentComplete
                    });
                },
                complete: function (xhr) {
                    //alert(xhr.responseText);
                    var result = $.parseJSON(xhr.responseText);
                    $.pnotify({
                        title: '',
                        text: result.Message,
                        type: result.Status
                    });
                    $("#progressbar").progressbar({
                        value: 0
                    });
                    if ((result) && (result.Status == "success")) {
                        console.log("sux");
                        //var cd = new JobDocument(result.Id, $("#ShipmentId").val(), $("#Name").val(), $("#DocumentType").val(), $("#HouseBLId").val(), $("#Description").val());
                        // kovm.JobDocuments.push(cd);
                        location.href = location.href;
                        //$("#frmAddDoc").clearForm();
                        $("#Name").val("")
                        $("#DocumentType").val(0);
                        $("#Description").val("");
                    }
                }
            });
        });

        // http://jsfiddle.net/rniemeyer/7yDTJ/
        function JobDocument(id, shipmentId, name, documentType, houseBLId, description) {
            var self = this;
            self.Id = id;
            self.ShipmentId = shipmentId;
            self.Name = ko.observable(name);
            self.DocumentType = ko.observable(documentType);
            self.Description = ko.observable(description);

            self.HouseBLId = ko.observable(houseBLId);

            self.edit = ko.observable(false);

            self.backup = null;

            self.TypeChanged = function (obj, event) {
                // console.log(event.currentTarget.options[event.currentTarget.value].innerText);
                self.Name(event.currentTarget.options[event.currentTarget.value].innerText);
            }
        }

        function JobDocumentVM() {
            var self = this;

            self.DocumentTypes = mapDictionaryToArray(@{Html.RenderAction("GetJobDocumentTypes", "JobDocument");});
            self.BLList = mapDictionaryToArray(@{Html.RenderAction("GetBLList", "JobDocument");});

            self.JobDocuments = ko.observableArray(@{Html.RenderAction("GetJobDocumentsKO", "JobDocument");});
            // self.JobRemovedDocuments = ko.observableArray(@{Html.RenderAction("GetRemovedDocumentsKO", "JobDocument");});

            self.edit = function (cd) {
                cd.backup = ko.mapping.toJS(cd);
                cd.edit(true);
            };
            self.cancel = function (cd) {
                if (cd.backup != null) {
                    var b = ko.mapping.fromJS(cd.backup);
                    cd.Name = b.Name;
                    cd.DocumentType = b.DocumentType;
                    cd.Description = b.Description;
                    cd.HouseBLId = b.HouseBLId;
                }
                cd.edit(false);
            };
            self.save = function (cd) {
                var url = "@Url.Action("SaveJobDocument", "JobDocument")";
                var json = ko.toJSON({ model: cd });
                $.ajax({
                    url: url,
                    type: 'POST',
                    dataType: 'json',
                    data: json,
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                        $.pnotify({
                            title: '',
                            text: result.Message,
                            type: result.Status
                        });
                    }
                });
                cd.edit(false);
            };
            self.remove = function (cd) {

                var url = "@Url.Action("RemoveDocument", "JobDocument")";
                var json = ko.toJSON({ model: cd });
                $.ajax({
                    url: url,
                    type: 'POST',
                    dataType: 'json',
                    data: json,
                    contentType: 'application/json; charset=utf-8',
                    success: function (result) {
                        if (result.Status == 'success') {
                            self.JobDocuments.remove(cd);
                        }
                        $.pnotify({
                            title: '',
                            text: result.Message,
                            type: result.Status,
                            after_open: function (opts) {
                                location.href = location.href;
                            }

                        });
                    },
                    error: function (msg) {
                        alert("Error: " + msg.status);
                    }
                });
            };

            self.restore = function (cd) {
                var url = "@Url.Action("RestoreDocument", "JobDocument")";
               var json = ko.toJSON({ model: cd });
               $.ajax({
                   url: url,
                   type: 'POST',
                   dataType: 'json',
                   data: json,
                   contentType: 'application/json; charset=utf-8',
                   success: function (result) {
                       if (result.Status == 'success') {
                           self.JobRemovedDocuments.remove(cd);
                       }
                       $.pnotify({
                           title: '',
                           text: result.Message,
                           type: result.Status,
                           after_open: function (opts) {
                               location.href = location.href;
                           }
                       });
                   }
               });
           };
           self.addDocument = function () {
               self.JobDocuments.push(new JobDocument(null, $("#SelectedId").val(), "", 1, ""));
           }
           self.download = function (cd) {
               var url = "@Url.Action("DownloadDocument", "JobDocument")";
                var data = { shipmentId: cd.ShipmentId, docId: cd.Id };
                $.download(url, data, "post");
            }
            }
            function mapDictionaryToArray(dictionary) {
                var result = [];
                for (var key in dictionary) {
                    if (dictionary.hasOwnProperty(key)) {
                        result.push({ key: key, value: dictionary[key] });
                    }
                }

                return result;
            }
            function getJobDocuments(shipmentId) {
                alert(shipmentId);
                var url = "@Url.Action("GetJobDocuments", "JobDocument")";
        var json = JSON.stringify({ shipmentId: shipmentId });
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            data: json,
            contentType: 'application/json; charset=utf-8',
            success: function (result) {
                if ((result) && (result.length > 0)) {
                    kovm.JobDocuments.removeAll();

                    for (var i = 0; i < result.length; i++) {
                        kovm.JobDocuments.push(new JobDocument(result[i].Id, result[i].ShipmentId, result[i].Name, result[i].DocumentType, result[i].HouseBLId, result[i].Description));
                    }
                } else {
                    kovm.JobDocuments.removeAll();
                }
                        @*$.pnotify({
                            title: '',
                            text: result.Message,
                            type: result.Status
                        });*@
                    }
                });
        }

        $('#doct tbody').on('click', 'tr', function () { //one click
            $(this).toggleClass('selected');
        });

    </script>