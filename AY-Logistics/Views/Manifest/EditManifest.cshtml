@model AYLogistics.Models.ManifestModel
@{
    Layout = "~/Views/Shared/_NoMenuNew.cshtml";
    ViewBag.Title = "Edit Manifest";
}
@Html.HiddenFor(mdoel => Model.ManifestId)
@Html.HiddenFor(mdoel => Model.ShipmentId)

<div class="max-w-screen-7xl mx-auto px-4 py-4 space-y-8 w-full">
    <div class="flex flex-col lg:flex-row md:justify-between space-y-2 lg:space-y-0 w-full text-left">
        <h2 class="text-2xl md:text-3xl font-semibold text-gray-900">Edit Manifest: <span data-bind="text:MFNumber"></span></h2>
        <button type="button" class="w-full lg:w-auto bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 text-sm mb-2">
            <i class="fas fa-plus"></i> @Html.ActionLink("Add Manifest", "PreManifest", "Manifest")
        </button>
    </div>

    
    <div>
        <div class="lg:hidden flex flex-col lg:flex-row space-x-0 md:space-x-4 my-6">
            <a onclick="GotoAttachments();" class="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 text-sm mb-2">
              <i class="fas fa-paperclip"></i>
              <span>Documents</span>
            </a>
            <a onclick="GenerateXML();" class="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 text-sm mb-2">
              <i class="fas fa-file-code"></i>
              <span>XML file</span>
            </a>
        </div>

        <div class="hidden lg:flex gap-2 justify-end">
            <button onclick="GotoAttachments();" class="flex items-center text-blue-700 hover:text-blue-800 gap-2">
                <i class="fas fa-paperclip"></i> Documents
            </button>
            <a onclick="GenerateXML();" class="flex items-center text-blue-700 hover:text-blue-800 gap-2">
                <i class="fas fa-file-code"></i> XML file
            </a>
        </div>

    </div>



    <!-- General Info Card -->

    <!-- Partials goes here -->
     <div class="hidden control pull-left space-right" style="margin-top: 0px;">
            @{Html.RenderPartial("../Party/_project", Model.ProjectModel);}
     </div>


        <!-- Legal and Vessel Buttons, Debit Note -->
        <div class="flex flex-col md:flex-row space-x-0 md:space-x-4 mb-6">
             <div>
                    @{Html.RenderPartial("../Party/_index", Model.PartyModel);}
             </div>
             <div class="control pull-left space-right" style="margin-top: 0px;">
                    @{Html.RenderPartial("../Party/_vessel", Model.VesselModel);}
             </div>
            <div>
                <a class="bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 text-sm mb-2 control" data-bind="click:$root.RequestDebitNote">
                    <i class="fas fa-envelope"></i>
                    <span>Request Debit Note</span>
                </a>
            </div>
        </div>


    <div class="bg-white shadow rounded-lg p-6">
      <h2 class="text-lg font-bold mb-4 text-gray-900">General Info:</h2>

         <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">

              <div class="flex flex-col">
                  <label for="EntryType" class="flex items-center space-x-2 text-sm mb-2">
                    <i class="fas fa-file-alt"></i>
                    <span>Entry Type</span>
                  </label>
                  <select id="EntryType" class="mt-1 p-2 border rounded">
                     <option value="1">Manifest</option>
                     <option value="2">PreAlert</option>
                  </select>
             </div>

             <div class="flex flex-col">
              <label for="voyageNo" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-hashtag"></i>
                <span>Master BL/AWB No.</span>
              </label>
              <input type="text" class="mt-1 p-2 border rounded required" data-bind='value: MasterBLno, uniqueName: true'>
             </div>

            <div class="flex flex-col">
              <label for="voyageNo" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-anchor"></i>
                <span>Voyage No.</span>
              </label>
              <input type="text" class="mt-1 p-2 border rounded" placeholder="Voyage No" data-bind='value: VoyageNo, uniqueName: true'>
            </div>

              <div class="flex flex-col">
                <label for="shippingAgent" class="mb-2 text-sm font-medium flex items-center justify-between">
                    <span class="flex items-center space-x-2">
                        <i class="fas fa-ship"></i>
                        <span>Vessel / Aircraft</span>
                    </span>
                    <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click: UpdateVessel">
                        <i class="fas fa-edit"></i>
                    </button>
                </label>
                <input type="text" id="vessel" class="p-2 border rounded w-full text-sm" placeholder="Search..." data-bind="value: VesselId.value, VesselSelect: VesselId, uniqueName: false">
             </div>

              <div class="flex flex-col">
                  <label for="modeOfShipment" class="flex items-center space-x-2 mb-2 text-sm">
                    <i class="fas fa-shipping-fast"></i>
                    <span>Mode of Shipment</span>
                  </label>
                  <select class="mt-1 p-2 border rounded" data-bind="options: $root.ModeofShipments, value:ModeofShipment, optionsText: 'value', optionsValue: 'key', optionsCaption: '--select--'">
                  </select>
             </div>

              <div class="flex flex-col">
                <label for="departurePort" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-map-marker-alt"></i>
                <span>Departure Port</span>
                </label>
                <input type="text" id="departurePort" class="mt-1 p-2 border rounded text-sm" placeholder="Search..." data-bind=' value:PortOfDestination.value, PortSelect: PortOfDestination , uniqueName: false'>
              </div>

              <div class="flex flex-col">
                <label for="dateTimeDeparture" class="flex items-center space-x-2 mb-2 text-sm">
                    <i class="fas fa-calendar-alt"></i>
                    <span>Date & Time Departure</span>
                </label>
                <input id="dateTimeDeparture" type="text" class="mt-1 p-2 border rounded bt_datetime" data-bind="value: DateOfDeparture">
              </div>

              <div class="flex flex-col">
                <label for="destinationPort" class="flex items-center space-x-2 mb-2 text-sm">
                    <i class="fas fa-flag"></i>
                    <span>Destination Port</span>
                </label>
                <input type="text" class="mt-1 p-2 border rounded" placeholder="Search..." data-bind=' value:PortOfDestination.value, PortSelect: PortOfDestination , uniqueName: false'>
              </div>

              <div class="flex flex-col">
                <label for="dateTimeArrival" class="flex items-center space-x-2 mb-2 text-sm">
                    <i class="fas fa-calendar-check"></i>
                    <span>Date & Time Arrival</span>
                </label>
                <input id="dateTimeArrival" type="text" class="mt-1 p-2 border rounded bt_datetime" data-bind="value: DateOfArrival">
             </div>

             <div class="flex flex-col">
                <label for="shippingAgent" class="mb-2 text-sm font-medium flex items-center justify-between">
                    <span class="flex items-center space-x-2">
                        <i class="fas fa-ship"></i>
                        <span>Shipping Agent</span>
                    </span>
                    <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click:$root.UpdateDOAgent">
                        <i class="fas fa-edit"></i>
                    </button>
                </label>
                <input type="text" class="p-2 border rounded w-full" placeholder="Search..." data-bind='value:DOAgent.value, PartySelect: DOAgent , uniqueName: false'>
             </div>

              <div class="flex flex-col">
                <label for="captainName" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-user-tie"></i>
                <span>Master/Captain Name</span>
                </label>
                <input type="text" class="mt-1 p-2 border rounded" data-bind='value: MasterName, uniqueName: false'>
              </div>

               <div class="flex flex-col">
                <label for="noHbl" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-box"></i>
                <span>No. of HBL</span>
                </label>
                <input type="text" class="mt-1 p-2 border rounded bg-gray-100 cursor-not-allowed" data-bind='value: TotalNoOfHBL' readonly>
            </div>

            <div class="flex flex-col">
              <label for="noContainers" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-box-open"></i>
                <span>No. of Containers</span>
              </label>
              <input type="text" class="mt-1 p-2 border rounded cursor-not-allowed bg-gray-100" data-bind='value: TotalNoOfContainer, uniqueName: false' readonly>
            </div>

             <div class="flex flex-col">
                <label for="noPackages" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-cubes"></i>
                <span>No. of Pkg</span>
                </label>
                <input type="text" class="mt-1 p-2 border rounded cursor-not-allowed bg-gray-100" data-bind='value: TotalNoOfPackages' readonly>
             </div>

             <div class="flex flex-col">
              <label for="totalWeight" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-weight-hanging"></i>
                <span>Total Weight</span>
              </label>
              <input type="text" id="totalWeight" class="mt-1 p-2 border rounded cursor-not-allowed bg-gray-100" data-bind='value: TotalWeight' readonly>
            </div>

            <div class="flex flex-col">
              <label for="totalCbm" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-weight-hanging"></i>
                <span>Total CBM</span>
              </label>
              <input type="text" class="mt-1 p-2 border rounded cursor-not-allowed bg-gray-100" data-bind='value: TotalMeasurement' readonly>
            </div>

            <div class="flex flex-col">
                <label for="netTonnage" class="flex items-center space-x-2 mb-2 text-sm">
                    <i class="fas fa-weight"></i>
                    <span>NET Tonnage</span>
                </label>
                <input type="text" class="mt-1 p-2 border rounded" data-bind='value: NetTonnage, uniqueName: false'>
            </div>

             <div class="flex flex-col">
              <label for="grossTonnage" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-weight-hanging"></i>
                <span>GROSS Tonnage</span>
              </label>
              <input type="text" class="mt-1 p-2 border rounded" data-bind='value: GrossTonnage, uniqueName: false'>
            </div>

             <div class="flex flex-col">
              <label for="officeCode" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-building"></i>
                <span>Office Code</span>
              </label>
              <select class="mt-1 p-2 border rounded" data-bind="options: $root.CustomOffice, value:CustomOfficeId, optionsText: 'value', optionsValue: 'key'">
              </select>
            </div>

            <div class="flex flex-col">
              <label for="officeCode" class="flex items-center space-x-2 mb-2 text-sm">
                <i class="fas fa-hashtag"></i>
                <span>Auto Generate BL#.</span>
              </label>
              <select id="BLNoAutoType" class="mt-1 p-2 border rounded">
                  <option value="1">NO</option>
                  <option value="2">YES</option>
              </select>
            </div>

             <div class="flex flex-col">
                <label for="deliveryAgent" class="mb-2 text-sm font-medium flex items-center justify-between">
                    <span class="flex items-center space-x-2">
                        <i class="fas fa-truck"></i>
                        <span>Delivery Agent</span>
                    </span>
                    <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click:$root.UpdateDeliveryAgent">
                        <i class="fas fa-edit"></i>
                    </button>
                </label>
                <input type="text" class="mt-1 p-2 border rounded w-full cursor-pointer text-sm" placeholder="Search..." data-bind="event: { blur: selectionChanged }, value: DOAgentL.value, PartySelect: DOAgentL, uniqueName: false">
            </div>


         </div>

    </div>


    <!-- BL and Container section -->
    <div class="bg-white shadow rounded-lg p-6">

    <h2 class="text-lg font-semibold text-gray-900 mb-4">House BL / AWB Information</h2>

    <!-- HouseBLItems Table as a Grid (with Knockout.js binding) -->
    <div data-bind="visible: HouseBLItems().length > 0">
        <div data-bind="foreach: HouseBLItems" class="space-y-6">
            <input class="hidden" type="text" data-bind='value: HouseBLId'/>
            <!-- Each Row -->

            <div">
                <div class="relative grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 gap-4 bg-gray-50 p-4 rounded-md">

                    <!-- Action Buttons (Top Right, Positioned within the Container) -->
                    <div class="flex lg:space-y-0 justify-end space-x-2 lg:col-span-4 mb-4">
                        <!-- Remove Button -->
                        <button id="rmbutton" type="button" class="bg-red-600 text-white hover:bg-red-800 text-xs px-4 py-1.5 rounded flex items-center space-x-2" data-bind="click: $root.RemoveHBL">
                            <i class="fas fa-times"></i>
                            <span class="hidden lg:block">Remove BL</span>
                        </button>
        
                        <!-- Print BOL Button -->
                        <button type="button" class="bg-blue-600 text-white hover:bg-blue-800 text-xs px-4 py-1.5 rounded flex items-center space-x-2" data-bind="click: $root.BLPrint">
                            <i class="fas fa-print"></i>
                            <span class="hidden lg:block">Print BOL</span>
                        </button>

                        <!-- Send Arrival Notice Button -->
                        <button type="button" class="bg-green-600 text-white hover:bg-green-800 text-xs px-4 py-1.5 rounded flex items-center space-x-2" data-bind="click: $root.SendArrivalNotice">
                            <i class="fas fa-envelope"></i>
                            <span class="hidden lg:block">Send Arrival Notice</span>
                        </button>
                    </div>

                    <!-- House BL/AWB No -->
                    <div class="flex flex-col">
                        <label for="HouseBLno" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-file-invoice"></i>
                            <span>House BL/AWB No.</span>
                        </label>
                        <input id="HouseBLno" type="text" class="text-sm p-2 border rounded" placeholder="HBL/AWB no." data-bind="value: HouseBLno, uniqueName: true">
                    </div>

                    <!-- Shipper -->
                    <div class="flex flex-col relative">
                        <label for="shipperNew" class="flex items-center justify-between mb-2 text-sm">
                            <span class="flex items-center space-x-2">
                                <i class="fas fa-user"></i>
                                <span>Shipper</span>
                            </span>
                            <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click: $root.UpdateShipper">
                                <i class="fas fa-edit"></i>
                            </button>
                        </label>
                        <input id="shipperNew" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: ShipperNew.value, PartySelect: ShipperNew, uniqueName: false">
                    </div>

                    <!-- Consignee/Customer -->
                    <div class="flex flex-col relative">
                        <label for="customerNew" class="flex items-center justify-between mb-2 text-sm">
                            <span class="flex items-center space-x-2">
                                <i class="fas fa-user-tie"></i>
                                <span>Consignee/Customer</span>
                            </span>
                            <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click: $root.UpdateCustomer">
                                <i class="fas fa-edit"></i>
                            </button>
                        </label>
                        <input id="customerNew" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: CustomerNew.value, PartySelect: CustomerNew, uniqueName: false">
                    </div>

                    <!-- Notify Party -->
                    <div class="flex flex-col relative">
                        <label for="notifyPartyNew" class="flex items-center justify-between mb-2 text-sm">
                            <span class="flex items-center space-x-2">
                                <i class="fas fa-user-circle"></i>
                                <span>Notify Party</span>
                            </span>
                            <button type="button" class="text-blue-600 hover:text-blue-800" data-bind="click: $root.UpdateNotifyParty">
                                <i class="fas fa-edit"></i>
                            </button>
                        </label>
                        <input id="notifyPartyNew" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: NotifyPartyNew.value, PartySelect: NotifyPartyNew, uniqueName: false">
                    </div>

                    <!-- Freight Indicator -->
                    <div class="flex flex-col">
                        <label for="freightIndicator" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-truck-loading"></i>
                            <span>Freight Indicator</span>
                        </label>
                        <select id="freightIndicator" class="text-sm p-2 border rounded w-full" data-bind="options: FreightIndicators, value: FreightIndicator, optionsText: 'value', optionsValue: 'key', optionsCaption: '--select--'"></select>
                    </div>

                    <!-- BL Nature -->
                    <div class="flex flex-col">
                        <label for="blNature" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-shipping-fast"></i>
                            <span>BL Nature</span>
                        </label>
                        <select id="blNature" class="text-sm p-2 border rounded w-full" data-bind="options: BLNatures, value: BLNature, optionsText: 'value', optionsValue: 'key', optionsCaption: '--select--'"></select>
                    </div>

                    <!-- BL Type -->
                    <div class="flex flex-col">
                        <label for="blType" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-boxes"></i>
                            <span>BL Type</span>
                        </label>
                        <select id="blType" class="text-sm p-2 border rounded w-full" data-bind="options: BLTypes, value: BLTypeId, optionsText: 'value', optionsValue: 'key'"></select>
                    </div>

                    <!-- Shipping Mark/No. -->
                    <div class="flex flex-col">
                        <label for="shippingMark" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-clipboard-list"></i>
                            <span>Shipping Mark/No.</span>
                        </label>
                        <input id="shippingMark" type="text" class="text-sm p-2 border rounded w-full" placeholder="Shipping Mark/No." data-bind="value: ShippingMark">
                    </div>

                    <!-- BL Status -->
                    <div class="flex flex-col">
                        <label for="blStatus" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-info-circle"></i>
                            <span>BL Status</span>
                        </label>
                        <select id="blStatus" class="text-sm p-2 border rounded w-full" data-bind="options: BLState, value: BLStateId, optionsText: 'value', optionsValue: 'key'"></select>
                    </div>

                    <!-- Port of Loading -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="portOfLoading" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-anchor"></i>
                            <span>Port of Loading</span>
                        </label>
                        <input id="portOfLoading" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: PortOfLoading.value, PortSelect: PortOfLoading, uniqueName: false">
                    </div>
                
                    <!-- Port of Unloading -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="portOfUnloading" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-ship"></i>
                            <span>Port of Unloading</span>
                        </label>
                        <input id="portOfUnloading" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: PortOfUnLoading.value, PortSelect: PortOfUnLoading, uniqueName: false">
                    </div>

                    <!-- Port of Origin -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="portOfOrigin" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-globe"></i>
                            <span>Port of Origin</span>
                        </label>
                        <input id="portOfOrigin" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: PortOfOrigin.value, PortSelect: PortOfOrigin, uniqueName: false">
                    </div>

                    <!-- Port of Original Loading -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="originalLoadingPort" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-ship"></i>
                            <span>Port of Original Loading</span>
                        </label>
                        <input id="originalLoadingPort" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: OriginalLoadingPort.value, PortSelect: OriginalLoadingPort, uniqueName: false">
                    </div>

                    <!-- Port Ultimate Destination -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="ultimateDestination" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-map-marker-alt"></i>
                            <span>Port Ultimate Destination</span>
                        </label>
                        <input id="ultimateDestination" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: UltimateDestination.value, PortSelect: UltimateDestination, uniqueName: false">
                    </div>

                    <!-- Port of Delivery -->
                    <div class="flex flex-col" data-bind="visible: $root.ModeofShipment() < 2 || $root.ModeofShipment() == null">
                        <label for="portOfDelivery" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-box"></i>
                            <span>Port of Delivery</span>
                        </label>
                        <input id="portOfDelivery" type="text" class="text-sm p-2 border rounded w-full" placeholder="Search..." data-bind="value: PortOfDelivery.value, PortSelect: PortOfDelivery, uniqueName: false">
                    </div>

                    <!-- Description of Goods -->
                    <div class="flex flex-col col-span-2">
                        <label for="descriptionOfGoods" class="flex items-center space-x-2 mb-2 text-sm">
                            <i class="fas fa-box-open"></i>
                            <span>Description of Goods</span>
                        </label>
                        <textarea id="descriptionOfGoods" class="p-2 border rounded w-full" placeholder="Description" rows="2" data-bind="value: Description"></textarea>
                    </div>
                </div>


                <div class="mt-4 p-6 border rounded-md involver">

                    <div class="flex justify-between items-center">
                        <div>
                            <h2 class="text-base font-semibold text-gray-900 mb-4">Container Details</h2>
                            <!-- Add Container Button -->
                            <a class="mb-4 bg-yellow-500 text-white hover:bg-yellow-700 text-xs px-3 py-1 rounded flex items-center space-x-2" data-bind="click: $data.addContainerItem">
                                <i class="fas fa-plus"></i>
                                <span>Add Container</span>
                            </a>
                        </div>
     
                    </div>

                    <div class="mb-4" data-bind='foreach: $data.ContainerItems'>
                        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-4 border border-gray-400 p-4 rounded-lg">

                        <input type="text" class="hidden" data-bind='value: ContainerId,uniqueName: true'/>

                        <!-- Remove Button -->
                        <div class="col-span-full flex justify-end">
                            <a class="text-red-600 hover:text-red-800" data-bind="click: $parent.deleteContainerItem">
                                <i class="fas fa-trash"></i> Remove
                            </a>
                        </div>

                        <!-- Container Items -->
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-box text-gray-600"></i>
                                    <span>Container No</span>
                                </label>
                                <input type="text" placeholder="Contnr No" class="text-sm p-2 border rounded" data-bind='value: ContainerNo, uniqueName: true'>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-box-open text-gray-600"></i>
                                    <span>Container Type</span>
                                </label>
                                <select class="text-sm p-2 border rounded" data-bind="options: ContainerTypes, value: ContainerType, optionsText: 'value', optionsValue: 'key', optionsCaption: '--select--'"></select>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-ruler-combined text-gray-600"></i>
                                    <span>Size</span>
                                </label>
                                <input type="text" placeholder="Size" class="text-sm p-2 border rounded" data-bind='value: ContainerSize, uniqueName: false'>
                            </div>
                            <div class="flex flex-col">
                                 <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-exclamation-circle text-gray-600"></i>
                                    <span>Indicator</span>
                                </label>
                                <select class="text-sm p-2 border rounded" data-bind="options: IndicatorTypes, value: Indicator, optionsText: 'value', optionsValue: 'key', optionsCaption: '--select--'"></select>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-lock text-gray-600"></i>
                                    <span>Seal No</span>
                                </label>
                                <input type="text" placeholder="Seal No" class="text-sm p-2 border rounded" data-bind='value: SealNo, uniqueName: true'>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-box text-gray-600"></i>
                                    <span>Package Type</span>
                                </label>
                                <select class="text-sm p-2 border rounded" data-bind="options: PackageTypes, value: PackageType, optionsText: 'value', optionsValue: 'key'"></select>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-cubes text-gray-600"></i>
                                    <span>No. of Pkg</span>
                                </label>
                                <input type="text" class="text-sm p-2 border rounded" data-bind='value: CNoOfPackage, uniqueName: false'>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-weight-hanging text-gray-600"></i>
                                    <span>Weight</span>
                                </label>
                                <input type="text" class="text-sm p-2 border rounded" data-bind='value: CWeight, uniqueName: false'>
                            </div>
                            <div class="flex flex-col">
                                <label class="flex items-center space-x-2 mb-1 text-sm">
                                    <i class="fas fa-ruler text-gray-600"></i>
                                    <span>Measure</span>
                                </label>
                                <input type="text" class="text-sm p-2 border rounded" data-bind='value: CMeasure, uniqueName: false'>
                            </div>
                        </div>

                    </div>
                        
                        <!-- BL Summary Fields -->
                        <div class="mt-4 bg-gray-100 p-4 rounded-md">
                            <p class="flex items-center justify-end my-3 text-sm">
                                <span class="inline-flex items-center space-x-2 bg-white rounded py-1 px-4">
                                    <i class="fas fa-check-circle text-green-500"></i>
                                    <span data-bind="text: BLStatusName"></span>
                                </span>
                            </p>
                            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                <div class="flex flex-col">
                                    <label class="flex items-center space-x-2 mb-1 text-sm mb-1">
                                        <i class="fas fa-cubes"></i>
                                        <span>BL No. of Pkg</span>
                                    </label>
                                    <input type="text" placeholder="NoPckg" class="bg-gray-50 text-sm p-2 border rounded cursor-not-allowed" data-bind='value: TotalBLPackages' readOnly="true">
                                </div>
                                <div class="flex flex-col">
                                    <label class="flex items-center space-x-2 mb-1 text-sm">
                                        <i class="fas fa-weight"></i>
                                        <span>Weight</span>
                                    </label>
                                    <input type="text" placeholder="kgs" class="bg-gray-50 text-sm p-2 border rounded cursor-not-allowed" data-bind='value: Weight' readOnly="true">
                                </div>
                                <div class="flex flex-col">
                                    <label class="flex items-center space-x-2 mb-1 text-sm">
                                        <i class="fas fa-ruler"></i>
                                        <span>Measure</span>
                                    </label>
                                    <input type="text" placeholder="cbm" class="bg-gray-50 text-sm p-2 border rounded cursor-not-allowed" data-bind='value: Measurement' readOnly="true">
                                </div>
                            </div>
                        </div>


                    </div>

            </div>
    </div>

</div>
        <div class="flex items-center space-x-4">
            <button id="SaveManifest" 
                class="mt-4 bg-green-500 text-white px-4 py-1.5 text-sm rounded-lg flex items-center space-x-2 hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed" 
                data-bind="click:Save, enable:saveEnabled()">
            <i class="fas fa-save"></i>
            <span>Save</span>
            </button>
            <button
                class="mt-4 bg-blue-500 text-white px-4 py-1.5 text-sm rounded-lg flex items-center space-x-2 hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed" 
                data-bind="click: addHouseBL"">
                <i class="fas fa-plus"></i>
                <span>Add HBL</span>
            </button>
        </div>
        @*<button id="SaveManifest" 
                class="mt-4 bg-green-500 text-white px-4 py-1.5 text-sm rounded-lg flex items-center space-x-2 hover:bg-green-600 disabled:bg-gray-300 disabled:cursor-not-allowed" 
                data-bind="click:Save, enable:saveEnabled()">
            <i class="fas fa-save"></i>
            <span>Save</span>
        </button>*@



    </div>

    </div>


     <div id="dialog-confirm" title="Manifest" class="display: none;">
        <p id="dialog-message"></p>
    </div>
    <div id="dialog-confirm1" title="Double Entry" class="display: none;">
        <p id="dialog-message1"></p>
    </div>
     <div id="dialog-confirm2" title="Double Entry" class="display: none;">
        <p id="dialog-message2"></p>
    </div>
     <div id="dialog-confirm3" title="Double Entry" class="display: none;">
        <p id="dialog-message3"></p>
    </div>
     <div id="dialog-confirm4" title="Double Entry" class="display: none;">
        <p id="dialog-message4"></p>
    </div>



@*<script src="@Url.Content("~/Scripts/EditManifestScripts.js")" type="text/javascript"></script>*@

<script type="text/javascript">

    var MI;
    var DataLoad = 0;
    var ContainerNo_outputArray = [];
    var ContainerNo_array = [];

    $(".chosen_select_L").chosen({
        disable_search_threshold: 5,
        no_results_text: "Oops, nothing found!"
    });


    $(document).ready(function () {

        $(".chosen_select_L").chosen('destroy');

        //  $('#da').datepicker();
        //   $('#dd').datepicker();
        MI = GetManifest($('#ManifestId').val());
        GetHouseBLItems(MI.ShipmentId);
        if(MI.EntryTypeId == 1)
        {
            $("#EntryType")[0].selectedIndex = 0;
        }
        if(MI.EntryTypeId == 3)
        {
            $("#EntryType")[0].selectedIndex = 1;
        }
        //$(".bt_datetime").datetimepicker({format: 'dd/mm/yyyy hh:ii'});
    }); 

    var koMM;

    function ManifestModel() {
        var self = this;
        self.VoyageNo = ko.observable(MI.VoyageNo);
        self.VesselId = new selectAuto();
        self.VesselId.id = MI.VesselId;
        self.VesselId.value = MI.VesselName;
        self.DOAgent = new selectAuto();
        self.DOAgent.id = MI.ShippingAgentId;
        self.DOAgent.value = MI.ShippingAgentName;

        self.DOAgentL = new selectAuto();
        self.DOAgentL.id = MI.DeliveryAgentId;
        self.DOAgentL.value = MI.DeliveryAgentName;

        self.ModeofShipment = ko.observable(MI.ModeofShipmentId);
        self.Nationality = ko.observable(MI.NationalityId);

        self.PortOfDeparture = new selectAuto();
        self.PortOfDestination = new selectAuto();
        self.PortOfDeparture.id = MI.PortOfDeparture;
        self.PortOfDeparture.value = MI.PDeparture;
        self.PortOfDestination.id = MI.PortOfDestination;
        self.PortOfDestination.value = MI.PDestination;

        self.DateOfDeparture = ko.observable(MI.DateDeparture);
        self.DateOfArrival = ko.observable(MI.DateArrival);
        self.MasterBLno = ko.observable(MI.MasterBL);
        self.MasterName = ko.observable(MI.MasterName);
        //  self.TotalNoOfContainer = ko.observable(MI.TotalNoOfContainer);
        self.NetTonnage = ko.observable(MI.NETtonnage);
        self.GrossTonnage = ko.observable(MI.GROSStonnage);
        self.HouseBLItems = ko.observableArray();
        self.MFNumber = ko.observable(MI.MFNumber);
        self.ManifestId = ko.observable(MI.ManifestId);
        self.ShipmentId = ko.observable(MI.ShipmentId);
        //  self.StatusRemarks =ko.observable(MI.StatusRemarks);
        self.Vessel = new VesselModel();
        self.CustomOfficeId = ko.observable(MI.CustomOfficeId);
        self.POwner = new POwnerModel();
        self.EntryType = ko.observable(2);

        // self.Vessels = mapDictionaryToArray(@{Html.RenderAction("GetVessel", "Manifest");});
        self.ModeofShipments = mapDictionaryToArray(@{Html.RenderAction("GetModeofShipment", "Manifest");});
        self.Nations = mapDictionaryToArray(@{Html.RenderAction("GetNationality", "Manifest");});
        self.CustomOffice = mapDictionaryToArray(@{Html.RenderAction("GetCustomeOffice", "Manifest");});

        self.addHouseBL = function(data){
            self.MiniSave(data);// Update the current data before creating another BL
            self.HouseBLItems.push(new HouseBLModel())
            $(".chosen_select_L").chosen();
            if($("#BLNoAutoType")[0].selectedIndex != 0)
            {
                if(self.DOAgentL.id > 0)
                {
                    $.each(self.HouseBLItems(), function() {
                        if(this.HouseBLno()==null || this.HouseBLno()=="")
                        {
                            if(self.DOAgentL.id == 7413 || self.DOAgentL.id == 5749 || self.DOAgentL.id == 1017){
                                result = GenerateHBLnumber(self.DOAgentL.id)
                                this.HouseBLno(result.HBLNumber);
                            }
                            else{
                                this.HouseBLno("");
                            }
                        }
                    });
                }
            }
        }
        self.RemoveHBL  = function(data){
            self.HouseBLItems.remove(data)
            DeleteHouseBL(data.HouseBLId())
            $.pnotify({
                title: 'Remove BL',
                text: "BL has been removed",
                type: "success"
            });
        }
        self.BLPrint  = function(data){
            $.download("../Manifest/PrintBL", {HouseBLId: data.HouseBLId(), ModeofShipment: self.ModeofShipment(), DeliveryAgent:self.DOAgentL.id}, "POST");    
        }
        self.SendArrivalNotice  = function(data){
            var result = SendArrivalNotice(data.HouseBLId(), self.ModeofShipment(), this.BLNature())
            $.pnotify({
                title: 'Arrival Notice',
                text: result.Message,
                type: result.Status
            });
        }
        self.RequestDebitNote  = function(data){
            var result = RequestDebitNote(data.ShipmentId(), self.ModeofShipment())
            $.pnotify({
                title: 'Debit Note',
                text: result.Message,
                type: result.Status
            });
        }

        self.UpdateShipper  = function(data){
            if(data.ShipperNew.id > 0)
            {
                EditParty(data.ShipperNew.id)
            }
            else if(data.ShipperNew.id() > 0)
            {
                EditParty(data.ShipperNew.id())
            }
            else{
                $.pnotify({
                    title: 'Update Shipper',
                    text: "Please Select a Shipper",
                    type: "error"
                });
            }
        }

        self.UpdateCustomer  = function(data){
            if(data.CustomerNew.id > 0)
            {
                EditParty(data.CustomerNew.id)
            }
            else if(data.CustomerNew.id() > 0)
            {
                EditParty(data.CustomerNew.id())
            }
            else{
                $.pnotify({
                    title: 'Update Customer',
                    text: "Please Select a Customer",
                    type: "error"
                });
            }
        }
        self.UpdateNotifyParty  = function(data){
            if(data.NotifyPartyNew.id > 0)
            {
                EditParty(data.NotifyPartyNew.id)
            }
            else if(data.NotifyPartyNew.id() > 0)
            {
                EditParty(data.NotifyPartyNew.id())
            }
            else{
                $.pnotify({
                    title: 'Update NotifyParty',
                    text: "Please Select a NotifyParty",
                    type: "error"
                });
            }
        }

        self.UpdateDOAgent  = function(data){
            console.log("DOAgent ID:", self.DOAgent.id);
            if(self.DOAgent.id > 0)
            {
                EditParty(self.DOAgent.id)
                console.log("DOAgent ID Edit Party:", self.DOAgent.id);
            }
            else if(self.DOAgent.id() > 0)
            {
                EditParty(self.DOAgent.id())
            }
            else{
                $.pnotify({
                    title: 'Update Shipping Agent',
                    text: "Please Select a Shipping Agent",
                    type: "error"
                });
            }
        }
        self.UpdateDeliveryAgent  = function(data){
            if(self.DOAgentL.id > 0)
            {
                EditParty(self.DOAgentL.id)
            }
            else if(self.DOAgentL.id() > 0)
            {
                EditParty(self.DOAgentL.id())
            }
            else{
                $.pnotify({
                    title: 'Update Delivery Agent',
                    text: "Please Select a Delivery Agent",
                    type: "error"
                });
            }
        }
        self.selectionChanged = (function(event){
            var result;
            if($("#BLNoAutoType")[0].selectedIndex != 0)
            {
                if(self.DOAgentL.id > 0)
                {
                    $.each(self.HouseBLItems(), function() {
                        if(this.HouseBLno()==null || this.HouseBLno()=="")
                        {
                            if(self.DOAgentL.id == 7413 || self.DOAgentL.id == 5749 || self.DOAgentL.id == 1017){
                                result = GenerateHBLnumber(self.DOAgentL.id)
                                this.HouseBLno(result.HBLNumber);
                            }
                            else{
                                this.HouseBLno("");
                            }
                        }
                    });
                }
            }
        });
        /* self.updateStatus = function(data){
            $.get('../Manifest/UpdateShipmentStatus',{ShipmentStatusId:$('#ShipmentStatusId').val(), StatusRemarks:data.StatusRemarks(), ShipmentId:data.ShipmentId()},function(result){
                 $.pnotify({
                     title:'Manifest',
                     text: result.Message,
                     type: result.Status
                 });
            });
         }*/

        self.UpdateProject  = function(data){
            if(data.ProjectId.id > 0)
            {
                EditProject(data.ProjectId.id)
            }
            else if(data.ProjectId.id() > 0)
            {
                EditProject(data.ProjectId.id())
            }
            else{
                $.pnotify({
                    title: 'Update Project',
                    text: "Please Select a Project",
                    type: "error"
                });
            }
        }

        //update Vessel
        self.UpdateVessel  = function(data){
            if(self.VesselId.id > 0)
            {
                EditVessel(self.VesselId.id)
            }
            else if(self.VesselId.id() > 0)
            {
                EditVessel(self.VesselId.id())
            }
            else{
                $.pnotify({
                    title: 'Update Vessel info',
                    text: "Please Select a Project",
                    type: "error"
                });
            }
        }

        self.saveEnabled = ko.computed(function(){
            var flag = 1;
            if(self.VoyageNo()==""){flag = 0;}
            $.each(self.HouseBLItems(), function() { 
                if(this.BLNature()==null){flag = 0;}
                if(this.FreightIndicator()==null){flag = 0;}
                //                if( this.Shipper()=="" || this.Shipper()==null){flag = 0;}
                //                else if( this.Customer()=="" || this.Customer()==null){flag = 0;}
                //                else if( this.NoOfPackage()=="" || this.NoOfPackage()==null){flag = 0;}
                //               // else if( this.ContainerType()=="" || this.ContainerType()==null){flag = 0;}
            });
            return flag;  
        });

        self.TotalNoOfHBL = ko.computed(function(){
            var total = 0;
            $.each(self.HouseBLItems(), function() {
                if( this.HouseBLno()=="" || this.HouseBLno()==null){
                    
                }else{
                    total++;}
            });
            return total;  
        });

        self.TotalWeight = ko.computed(function(){
            var total = 0;
            $.each(self.HouseBLItems(), function() {
                total = total + parseFloat(this.Weight());
            });
            return total;  
        });
        self.TotalMeasurement = ko.computed(function(){
            var total = 0;
            $.each(self.HouseBLItems(), function() {
                total = total + parseFloat(this.Measurement());
            });
            return total;  
        });

        self.TotalNoOfPackages = ko.computed(function(){
            var total = 0;
            $.each(self.HouseBLItems(), function() {
                total = total + parseInt(this.TotalBLPackages());
            });
            return total;  
        });

        self.TotalNoOfContainer = ko.computed(function(){
            var total = 0;
            $.each(self.HouseBLItems(), function() {
                $.each(this.ContainerItems(), function() {
                    var count = 0;
                    var start = false;
                    if(this.ContainerNo()!=null)
                    {
                        ContainerNo_array.push(this.ContainerNo()); 
                        for (j = 0; j < ContainerNo_array.length; j++) { 
                            for (k = 0; k < ContainerNo_outputArray.length; k++) { 
                                if ( ContainerNo_array[j] == ContainerNo_outputArray[k] ) { 
                                    start = true; 
                                } 
                            } 
                            count++; 
                            if (count == 1 && start == false) { 
                                ContainerNo_outputArray.push(ContainerNo_array[j]); 
                            } 
                            start = false; 
                            count = 0; 
                        } ; 
                        total = ContainerNo_outputArray.length;
                    }
                });
            });
            return total;
        });

        /*condition MOS*/
        self.ModeofShipment.subscribe(function(){
            if(self.ModeofShipment()==1){self.CustomOfficeId(1);} // 1-sea
            else if(self.ModeofShipment()==2){self.CustomOfficeId(2);} //2-air
            $.each(self.HouseBLItems(), function() {
                if(self.ModeofShipment()==1){this.BLTypeId(1);} // 1-sea
                else if(self.ModeofShipment()==2){this.BLTypeId(3);} //2-air
                $.each(this.ContainerItems(), function() {
                    if(self.ModeofShipment()==1){this.PackingType(1);}
                    else if(self.ModeofShipment()==2){this.PackingType(2);}
                });
            });
        });

        self.MasterBLno.subscribe(function(){ 
            var MBL= SearchMaterBL(self.MasterBLno());
            if(MBL.ManifestId > 0)
            {
                $("#dialog-message1").text("This Master BL '"+self.MasterBLno()+"' is already entered as a Manifest");
                $( "#dialog-confirm1" ).dialog({
                    closeOnEscape: false,
                    open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
                    resizable: false,
                    height:180,
                    width:315,
                    modal: true,
                    buttons: {
                        "Go Back": function() {
                            self.MasterBLno("");
                            $( this ).dialog( "close" );
                        },
                        "MBL Detail":function(){
                            window.location = '../Manifest/EditManifest?ManifestId='+ MBL.ManifestId;
                        }
                    }
                });
            }
            else
            {
                if(MBL.ShipmentId > 0)
                {
                    $("#dialog-message2").text("This Master BL '"+self.MasterBLno()+"' is already entered as a JOB, Do you want to Create a Manifest");
                    $( "#dialog-confirm2" ).dialog({
                        closeOnEscape: false,
                        open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
                        resizable: false,
                        height:180,
                        width:315,
                        modal: true,
                        buttons: {
                            "NO": function() {
                                self.MasterBLno("");
                                $( this ).dialog( "close" );
                            },
                            "YES":function(){
                                ConvertJobToManifest(MBL.ShipmentId);
                                MBL= SearchMaterBL(self.MasterBLno());
                                window.location = '../Manifest/EditManifest?ManifestId='+ MBL.ManifestId; 
                            }
                        }
                    });
                }
            }

        });

        self.Save = function(data){
            if ($("#EntryType")[0].selectedIndex == 0) {
                self.EntryType(1);
            }
            if ($("#EntryType")[0].selectedIndex == 1) {
                self.EntryType(3);
            }
            var HB = {HouseBLItems:self.HouseBLItems()};
            var json = JSON.stringify(HB);
            $.ajax({
                url: '/Manifest/UpdateManifest',
                type: 'POST',
                dataType: 'json',
                data: ko.toJSON({MM: koMM}),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.ShipmentStatus == "success") {
                        $.pnotify({
                            title: 'Shipment Info ',
                            text: result.ShipmentMessage,
                            type: result.ShipmentStatus
                        });
                    }
                    if (result.ShipmentStatus == "error") {
                        $.pnotify({
                            title: 'Shipment Info ',
                            text: result.ShipmentMessage,
                            type: result.ShipmentStatus
                        });
                    }
                    if (result.BOLStatus == "success") {
                        $.pnotify({
                            title: 'BOL Info ',
                            text: result.BOLMessage,
                            type: result.BOLStatus
                        });
                    }
                    if (result.BOLStatus == "error") {
                        $.pnotify({
                            title: 'BOL Info ',
                            text: result.BOLMessage,
                            type: result.BOLStatus
                        });
                    }
                    if (result.Status == "error") {
                        $.pnotify({
                            title: 'Shipment Info ',
                            text: result.Message,
                            type: result.Status
                        });
                    }
                
                }
            });
        }

        self.MiniSave = function(data){
            if ($("#EntryType")[0].selectedIndex == 0) {
                self.EntryType(1);
            }
            if ($("#EntryType")[0].selectedIndex == 1) {
                self.EntryType(3);
            }
            var HB = {HouseBLItems:self.HouseBLItems()};
            var json = JSON.stringify(HB);
            $.ajax({
                url: '/Manifest/UpdateManifest',
                type: 'POST',
                dataType: 'json',
                data: ko.toJSON({MM: koMM}),
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                }
            });
        }
    }

    function downloadSuccess(){
        // window.location.href="/Manifest/create";
    }


    function HouseBLModel(){
        var self = this;
        self.HouseBLId = ko.observable();
        self.HouseBLno = ko.observable();
        self.ContainerItems = ko.observableArray();
        //  self.ContainerItems.push( new ContainerModel());
        // self.ContainerType = ko.observable();
        // self.ContainerNo = ko.observable();
        //  self.SealNo = ko.observable();
        // self.TypeofPackage = ko.observable();
        self.NoOfPackage = ko.observable(0);
        self.TotalBLPackages = ko.observable(0);
        self.FreightIndicator = ko.observable();
        self.BLNature = ko.observable();
        self.ShippingMark = ko.observable();
        self.Shipper = ko.observable();
        self.NotifyParty = ko.observable();
        self.Customer = ko.observable();

        self.CustomerNew = new selectAuto();
        self.ShipperNew =  new selectAuto();
        self.NotifyPartyNew = new selectAuto();
        // self.DOAgent = new selectAuto();

        self.Weight = ko.observable(0);
        self.Measurement = ko.observable();
        self.ProjectId = new selectAuto();

        self.PortOfLoading = new selectAuto();
        self.PortOfUnLoading = new selectAuto();
        self.PortOfOrigin = new selectAuto();
        self.OriginalLoadingPort = new selectAuto();
        self.PortOfDelivery = new selectAuto();
        self.UltimateDestination = new selectAuto();

        self.Description = ko.observable();
        self.BLStatusId = ko.observable();
        self.BLStatusName = ko.observable();
        self.ClearanceBy = new selectAuto();
        self.BLTypeId = ko.observable();
        self.BLStateId = ko.observable();
        // self.ContainerInfo = ko.observable();


        self.FreightIndicators = mapDictionaryToArray(@{Html.RenderAction("GetFreightIndicator", "Manifest");});
        self.BLStatus = mapDictionaryToArray(@{Html.RenderAction("GetBLAllStatusList", "Manifest");});
        self.BLNatures = mapDictionaryToArray(@{Html.RenderAction("GetBLNature", "Manifest");});
        self.BLTypes = mapDictionaryToArray(@{Html.RenderAction("GetBLType", "Manifest");});
        self.BLState = mapDictionaryToArray(@{Html.RenderAction("GetBLState", "Manifest");});

       
        self.addContainerItem = function(data) {
            self.ContainerItems.push( new ContainerModel());
        };

        self.TotalBLPackages = ko.computed(function(){
            var total = 0;
            $.each(self.ContainerItems(), function() {
                total = total + parseInt(this.CNoOfPackage());
            });
            return total;  
        });

        self.Weight = ko.computed(function(){
            var total = 0;
            $.each(self.ContainerItems(), function() {
                total = total + parseFloat(this.CWeight());
            });
            return total;  
        });
        self.Measurement = ko.computed(function(){
            var total = 0;
            $.each(self.ContainerItems(), function() {
                total = total + parseFloat(this.CMeasure());
            });
            return total;  
        });

        self.deleteContainerItem  = function(data){
            // console.log(data);
            self.ContainerItems.remove(data);
            DeleteContainer(data.ContainerId())
            $.pnotify({
                title: 'Remove Container',
                text: "Container has been removed",
                type: "success"
            });
        }

        self.HouseBLno.subscribe(function(){
            if(DataLoad > 0)
            {
                if(koMM.MasterBLno() == self.HouseBLno())
                {
                    self.HouseBLno("");
                }
                var HBL= SearchHouseBL(self.HouseBLno());
                if(HBL.ManifestId > 0)
                {
                    $("#dialog-message3").text("This House BL '"+self.HouseBLno()+"' is already entered as Manifest");
                    $( "#dialog-confirm3" ).dialog({
                        closeOnEscape: false,
                        open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
                        resizable: false,
                        height:180,
                        width:315,
                        modal: true,
                        buttons: {
                            "Go Back": function() {
                                self.HouseBLno("");
                                $( this ).dialog( "close" );
                            },
                            "BL detail":function(){
                                //window.location = '../Manifest/EditManifest?ManifestId='+ HBL.ManifestId; 
                                window.open("../Manifest/ViewManifestDetail?ManifestId="+ HBL.ManifestId, 'window name', 'window settings'); 
                            },
                            "Add this BL": function() {
                                MoveBL(HBL.HBLId,HBL.ShipmentId,MI.ShipmentId );
                                AllocateForMovingBL(self.HouseBLno(),MI.ShipmentId);
                                $( this ).dialog( "close" );
                                //  location.reload(); // refresh the page
                            },

                        }
                    });
                }
                else
                {
                    if(HBL.ShipmentId > 0)
                    {
                        $("#dialog-message4").text("This BL '"+self.HouseBLno()+"' is already entered AS a JOB");
                        $( "#dialog-confirm4" ).dialog({
                            closeOnEscape: false,
                            open: function(event, ui) { $(".ui-dialog-titlebar-close").hide(); },
                            resizable: false,
                            height:180,
                            width:315,
                            modal: true,
                            buttons: {
                                "Go Back": function() {
                                    self.HouseBLno("");
                                    $( this ).dialog( "close" );
                                },
                                /* "Convert":function(){
                                 ConvertJobToManifest(HBL.ShipmentId);
                                 HBL= SearchHouseBL(self.HouseBLno());
                                 window.location = '../Manifest/EditManifest?ManifestId='+ HBL.ManifestId; 
                                 },*/
                                "BL detail":function(){
                                    //window.location = '../Manifest/EditManifest?ManifestId='+ HBL.ManifestId; 
                                    window.open("../Job/ViewJob?JobId="+ HBL.JobId + "&HBLId=" + HBL.HBLId, 'window name', 'window settings'); 
                                },
                                "Add this BL": function() {
                                    MoveBL(HBL.HBLId,HBL.ShipmentId,MI.ShipmentId );
                                    AllocateForMovingBL(self.HouseBLno(),MI.ShipmentId);
                                    $( this ).dialog( "close" );
                                    // location.reload(); // refresh the page
                                },
                            }
                        });
                    }
                }
            }
        });
      
    }

    function ContainerModel(){
        var self = this;
        self.PackingType = ko.observable();
        self.ContainerId  = ko.observable();
        self.ContainerNo = ko.observable();
        self.ContainerType = ko.observable();
        self.PackageType = ko.observable();
        self.ContainerSize = ko.observable();
        self.CNoOfPackage = ko.observable(0);
        self.CWeight = ko.observable(0);
        self.CMeasure = ko.observable(0);
        self.Indicator = ko.observable();
        self.SealNo = ko.observable();
        self.ContainerTypes = mapDictionaryToArray(@{Html.RenderAction("GetContainerType", "Manifest");});
    self.IndicatorTypes = mapDictionaryToArray(@{Html.RenderAction("GetContainerIndicatorType", "Manifest");});
    self.PackingTypes = mapDictionaryToArray(@{Html.RenderAction("GetPacking", "Manifest");});
    self.PackageTypes = mapDictionaryToArray(@{Html.RenderAction("GetTypeofPackage", "Manifest");});
    /*condition MOS*/
    if(koMM.ModeofShipment()==1){this.PackingType(1);}
    else if(koMM.ModeofShipment()==2){this.PackingType(2);}
}




/*============================= Other Functions ============================*/
function mapDictionaryToArray(dictionary) {
    var result = [];
    for (var key in dictionary) {
        if (dictionary.hasOwnProperty(key)) {
            result.push({ key: key, value: dictionary[key] });
        }  
    } 
    return result;
}


    
function mapDictionaryToArray1(dictionary) {
    var result = [];
    for (var key in dictionary) {
        if (dictionary.hasOwnProperty(key)) {
            result.push({ Value: key, Text: dictionary[key] });
        }  
    } 
    return result;
}


/* ko.bindingHandlers.datetimepicker = {
     init: function (element, valueAccessor, allBindings) {
       //initialize datepicker with some optional options
         var format;
         // var defaultFormat = 'yyyy-mm-dd hh:ii:ss'
           var defaultFormat = 'dd/mm/yyyy hh:ii'
         if (typeof allBindings == 'function') {
             format = allBindings().format || defaultFormat;
         }
         else {
             format = allBindings.get('format') || defaultFormat;
         }
         $(element).datetimepicker({
            // initialDate: new Date(),
             autoclose: true,
             todayBtn: true,
             'format': format
         })
       //when a user changes the date, update the view model
       ko.utils.registerEventHandler(element, "changeDate", function(event) {
           var value = valueAccessor();
              if (ko.isObservable(value)) {
                  value($(element).datetimepicker("getFormattedDate"));
              }
       });
     },
     update: function (element, valueAccessor) {
        // var date = ko.unwrap(valueAccessor());
         var date = ko.utils.unwrapObservable(valueAccessor());
         if (date) {
             $(element).datetimepicker('setValue', date);
         }
     }
 };*/




function selectAuto(){
    var self = this;
    self.value = ko.observable();
    self.id = ko.observable();
}

ko.bindingHandlers.PartySelect = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called when the binding is first applied to an element
        // Set up any initial state, event handlers, etc. here

        $(element).autocomplete({
            source: function( request, response ) {
                $.ajax( {
                    url: "../Party/SearchParty",
                    dataType: "json",
                    data:{ 'query':request.term ,"type":1, subtype: 2 },
                    success: function( data ) {
                        var test = [];



                        // pass a function to map
                      const map1 = data.map(x => ({
                          id:x.Id,
                          label:x.Name,
                          value:x.Name
                      }));

                        console.log(map1);
                        response( map1 );
                    }
                } );
            },
            minLength: 2,
            select: function( event, ui ) {
       
                valueAccessor().id =  ui.item.id;
                valueAccessor().value =  ui.item.value;
                console.log(valueAccessor());    
                console.log(viewModel);
                console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
            }
        } );
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called once when the binding is first applied to an element,
        // and again whenever any observables/computeds that are accessed change
        // Update the DOM element based on the supplied values here.
    }
};


ko.bindingHandlers.PortSelect = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called when the binding is first applied to an element
        // Set up any initial state, event handlers, etc. here

        $(element).autocomplete({
            source: function( request, response ) {
                $.ajax( {
                    url: "../Manifest/SearchPort",
                    dataType: "json",
                    data:{ 'query':request.term ,"type":1, subtype: 2, "mode": koMM.ModeofShipment },
                    success: function( data ) {
                        var test = [];



                        // pass a function to map
                      const map1 = data.map(x => ({
                          id:x.Id,
                          label:x.Name,
                          value:x.Name
                      }));

                        console.log(map1);
                        response( map1 );
                    }
                } );
            },
            minLength: 2,
            select: function( event, ui ) {
       
                valueAccessor().id =  ui.item.id;
                valueAccessor().value =  ui.item.value;
                console.log(valueAccessor());    
                console.log(viewModel);
                console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
            }
        } );
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called once when the binding is first applied to an element,
        // and again whenever any observables/computeds that are accessed change
        // Update the DOM element based on the supplied values here.
    }
};

//Vessel Selcet Function
ko.bindingHandlers.VesselSelect = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called when the binding is first applied to an element
        // Set up any initial state, event handlers, etc. here

        $(element).autocomplete({
            source: function( request, response ) {
                $.ajax( {
                    url: "../Party/SearchVessel",
                    dataType: "json",
                    data:{ 'query':request.term ,"type":1, subtype: 2 },
                    success: function( data ) {
                        var test = [];



                        // pass a function to map
                      const map1 = data.map(x => ({
                          id:x.Id,
                          label:x.Name,
                          value:x.Name
                      }));

                        console.log(map1);
                        response( map1 );
                    }
                } );
            },
            minLength: 2,
            select: function( event, ui ) {
       
                valueAccessor().id =  ui.item.id;
                valueAccessor().value =  ui.item.value;
                console.log(valueAccessor());    
                console.log(viewModel);
                console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
            }
        } );
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called once when the binding is first applied to an element,
        // and again whenever any observables/computeds that are accessed change
        // Update the DOM element based on the supplied values here.
    }
};

//Project Selcet Function
ko.bindingHandlers.ProjectSelect = {
    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called when the binding is first applied to an element
        // Set up any initial state, event handlers, etc. here

        $(element).autocomplete({
            source: function( request, response ) {
                $.ajax( {
                    url: "../Job/SearchProject",
                    dataType: "json",
                    data:{ 'query':request.term ,"type":1, subtype: 2 },
                    success: function( data ) {
                        var test = [];



                        // pass a function to map
                      const map1 = data.map(x => ({
                          id:x.Id,
                          label:x.Name,
                          value:x.Name
                      }));

                        console.log(map1);
                        response( map1 );
                    }
                } );
            },
            minLength: 2,
            select: function( event, ui ) {
       
                valueAccessor().id =  ui.item.id;
                valueAccessor().value =  ui.item.value;
                console.log(valueAccessor());    
                console.log(viewModel);
                console.log( "Selected: " + ui.item.value + " aka " + ui.item.id );
            }
        } );
    },
    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {
        // This will be called once when the binding is first applied to an element,
        // and again whenever any observables/computeds that are accessed change
        // Update the DOM element based on the supplied values here.
    }
};


//function to allow only numbers (eg:<input type=="" onkeypress="return isNumberKey(event)/>)
function isNumberKey(evt) {
    var charCode = (evt.which) ? evt.which : event.keyCode;
    if (charCode != 46 && charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    } else {
        return true;
    }      
}


function DeleteHouseBL(HBLId){
    var url = "@Url.Action("DeleteHBLitem", "Manifest")";
    var results ;
    var flag = 0;
    var param = {HBLId:HBLId};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function GenerateHBLnumber(val){
    var url = "@Url.Action("GenerateHouseBLnumber", "Manifest")";
    var results ;
    var flag = 0;
    var param = {DOAId:val};   
    var data = JSON.stringify(param);     
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function SendArrivalNotice(HBLId,Mode, BLN){
    var url = "@Url.Action("SendArrivalNotice", "Manifest")";
    var results ;
    var flag = 0;
    var param = {HBLId:HBLId, ModeofShipment: Mode, BLNature: BLN};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function RequestDebitNote(SPId,Mode){
    var url = "@Url.Action("RequestDebitNote", "Manifest")";
    var results ;
    var flag = 0;
    var param = {SPId:SPId, ModeofShipment: Mode};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function DeleteContainer(ContainerId){
    var url = "@Url.Action("DeleteContaineritem", "Manifest")";
    var results ;
    var flag = 0;
    var param = {ContainerId:ContainerId};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

    
function GetManifest(MfId){
    var url = "@Url.Action("GetManifest", "Manifest")";
    var results ;
    var flag = 0;
    var param = {MfId:MfId};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function SearchMaterBL(MasterBLnumber){
    var url = "@Url.Action("GetMasterBL", "Manifest")";
    var results ;
    var flag = 0;
    var param = {MasterBLnumber:MasterBLnumber};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function SearchHouseBL(HouseBLnumber){
    var url = "@Url.Action("GetHouseBL", "Manifest")";
    var results ;
    var flag = 0;
    var param = {HouseBLnumber:HouseBLnumber};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function ConvertJobToManifest(ShipmentId){
    var url = "@Url.Action("ConvertJobToManifest", "Manifest")";
    var results ;
    var flag = 0;
    var param = {ShipmentId:ShipmentId};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function MoveBL(BLId, CurrentShipmentId, NewShipmentId){
    var url = "@Url.Action("MoveBL", "Manifest")";
    var results ;
    var flag = 0;
    var param = {BLId:BLId, CurrShipmentId:CurrentShipmentId, NewShipmentId:NewShipmentId};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}


/* $("#updateStatus").click(function () {   
     $.get('../Manifest/UpdateShipmentStatus',{ShipmentStatusId: $('#ShipmentStatusId').val(), StatusRemarks: self.StatusRemarks()},function(result){
         $.pnotify({
             title:'Manifest',
             text: result.Message,
             type: result.Status
         });
     });
  });*/



function GotoAttachments()
{
    //var page = "../JobDocument/RawIndex?ShipmentId=" + MI.ShipmentId ;
    //var $dialog = $('<div style="overflow:visible"></div>')
    //               .html('<iframe style="border: 0px;" src="' + page + '" width="100%" height="100%"></iframe>')
    //               .dialog({
    //                   autoOpen: false,
    //                   modal: true,
    //                   height: 720,
    //                   width: 1340,
    //                   resizable: true,
    //                   title: "DOCUMENTS",
    //                   buttons: {
    //                       Close: function () {
    //                           $(this).dialog("close");

    //                       }
    //                   }
    //               });
    //$dialog.dialog('open');

    var page = "../JobDocument/RawIndex?ShipmentId=" + MI.ShipmentId;
    window.location.href = page;
}

function GenerateXML()
{
    $.download("../XML/SerializeManifestToXML", { ManifestId: MI.ManifestId}, "POST");   
    // window.location.href = "../JobDocument/Index?ShipmentId=" + MI.ShipmentId;
}

function GetHouseBLItems(SPId){
    $.getJSON("../Manifest/GetHouseBLItems",{SPId:SPId},function(data){
        for(var i=0; i <data.length;i++)
        {
            var items = new HouseBLModel();
            items.HouseBLId(data[i].HouseBLId);
            items.HouseBLno(data[i].HouseBL);
            items.Shipper(data[i].ShipperId);
            items.NotifyParty(data[i].NotifyPartyId);
            items.Customer(data[i].CustomerId);

            items.ShipperNew.id(data[i].ShipperId); items.ShipperNew.value(data[i].ShipperName);
            items.CustomerNew.id(data[i].CustomerId); items.CustomerNew.value(data[i].CustomerName);
            items.NotifyPartyNew.id(data[i].NotifyPartyId); items.NotifyPartyNew.value(data[i].NotifyName);
            //  items.DOAgent.id(data[i].DOAgentId); items.DOAgent.value(data[i].DOAgentName);
                    
            items.Description(data[i].Description);
            //   items.ContainerInfo(data[i].ContainerInfo);
            //  items.ContainerType(data[i].ContainerTypeId);
            //  items.ContainerNo(data[i].ContainerNo);
            //  items.SealNo(data[i].SealNo);
            //   items.TypeofPackage(data[i].TypeofPackageId);
            items.NoOfPackage(data[i].NoOfPackage);
            items.FreightIndicator(data[i].FreightIndicatorId);
            //  items.Weight(data[i].Weight);
            //  items.Measurement(data[i].Measurement);
            items.ProjectId.id(data[i].ProjectId); items.ProjectId.value(data[i].ProjectName);

            items.PortOfLoading.id(data[i].PortOfLoading); items.PortOfLoading.value(data[i].PortOfLoadingName);
            items.PortOfUnLoading.id(data[i].PortOfUnloading); items.PortOfUnLoading.value(data[i].PortOfUnloadingName);
            items.PortOfOrigin.id(data[i].PortOfOrigin); items.PortOfOrigin.value(data[i].PortOfOriginName);
            items.OriginalLoadingPort.id(data[i].OriginalLoadingPort); items.OriginalLoadingPort.value(data[i].OriginalLoadingPortName);
            items.UltimateDestination.id(data[i].UltimateDestination); items.UltimateDestination.value(data[i].UltimateDestinationName);
            items.PortOfDelivery.id(data[i].PortOfDelivery); items.PortOfDelivery.value(data[i].PortOfDeliveryName);
                    
            items.BLStatusId(data[i].BLStatusId);
            items.BLStatusName(data[i].BLStatusName);
            items.ClearanceBy.id(data[i].ClearanceBy); items.ClearanceBy.value(data[i].ClearanceByName);
            items.BLNature(data[i].BLNatureId);
            items.BLTypeId(data[i].BLTypesId);
            items.BLStateId(data[i].BLStateId);
            items.ShippingMark(data[i].ShippingMark);

            koMM.HouseBLItems.push(items)
            //    $(".chosen_select_L").chosen();
            GetContainerItems(data[i].HouseBLId,[i]);
        }
        DataLoad = 1;
    });
}


function GetContainerItems(HBLId,BLcount){
    console.log(HBLId,BLcount);
    $.getJSON("../Manifest/GetContainerItems",{HBLId:HBLId},function(data){
        for(var k=0; k <data.length;k++)
        {
            var items = new ContainerModel();
            items.ContainerId(data[k].Id);
            items.PackingType(data[k].PackingId);
            items.ContainerNo(data[k].ContainerNo);
            items.ContainerType(data[k].ContainerTypeId);
            items.PackageType(data[k].TypeofPackageId)
            items.ContainerSize(data[k].Size);
            items.CNoOfPackage(data[k].CNoOfPackage);
            items.CWeight(data[k].CWeight);
            items.CMeasure(data[k].CMeasure);
            items.Indicator(data[k].ContainerIndicatorId);
            items.SealNo(data[k].SealNo);

            koMM.HouseBLItems()[BLcount].ContainerItems.push(items);
        }
    });
}

/****************************Get Data for Moving BL**********************************/

function GetDataForMovingBL(BLno, newShipmentId){
    var url = "@Url.Action("GetHouseBLItem", "Manifest")";
    var results ;
    var flag = 0;
    var param = {SPId:newShipmentId,HBLno:BLno};               
    var data = JSON.stringify(param);   
    $.ajax({
        type: "POST",
        url: url,
        async:false,
        contentType: "application/json; charset=utf-8",
        data: data,
        success: function(result){
            results = result;
        },
        dataType: "json"
    });
    return results;
}

function AllocateForMovingBL(BLno, newShipmentId){
    var BLcount = -1;
    $.each(koMM.HouseBLItems(), function() {
        BLcount = BLcount + 1;
        if(this.HouseBLno()==BLno)
        {
            //console.log("yes"+ this.HouseBLno()); //AFTMLE240800058test
            var data = GetDataForMovingBL(BLno, newShipmentId);
            this.HouseBLId(data[0].HouseBLId);
            this.HouseBLno(data[0].HouseBL);
            this.Shipper(data[0].ShipperId);
            this.NotifyParty(data[0].NotifyPartyId);
            this.Customer(data[0].CustomerId);

            this.ShipperNew.id(1123); this.ShipperNew.value("HIDEAWAY BEACH RESORT & SPA  AT DHONAKULHI INVESTMENT PVT LTD");
            this.CustomerNew.id(data[0].CustomerId); this.CustomerNew.value(data[0].CustomerName);
            this.NotifyPartyNew.id(data[0].NotifyPartyId); this.NotifyPartyNew.value(data[0].NotifyName);
                    
            this.Description(data[0].Description);
            this.NoOfPackage(data[0].NoOfPackage);
            this.FreightIndicator(data[0].FreightIndicatorId);
            this.ProjectId.id(data[0].ProjectId); this.ProjectId.value(data[0].ProjectName);

            this.PortOfLoading.id(data[0].PortOfLoading); this.PortOfLoading.value(data[0].PortOfLoadingName);
            this.PortOfUnLoading.id(data[0].PortOfUnloading); this.PortOfUnLoading.value(data[0].PortOfUnloadingName);
            this.PortOfOrigin.id(data[0].PortOfOrigin); this.PortOfOrigin.value(data[0].PortOfOriginName);
            this.OriginalLoadingPort.id(data[0].OriginalLoadingPort); this.OriginalLoadingPort.value(data[0].OriginalLoadingPortName);
            this.UltimateDestination.id(data[0].UltimateDestination); this.UltimateDestination.value(data[0].UltimateDestinationName);
            this.PortOfDelivery.id(data[0].PortOfDelivery); this.PortOfDelivery.value(data[0].PortOfDeliveryName);
                    
            this.BLStatusId(data[0].BLStatusId);
            this.BLStatusName(data[0].BLStatusName);
            this.ClearanceBy.id(data[0].ClearanceBy); this.ClearanceBy.value(data[0].ClearanceByName);
            this.BLNature(data[0].BLNatureId);
            this.BLTypeId(data[0].BLTypesId);
            this.BLStateId(data[0].BLStateId);
            this.ShippingMark(data[0].ShippingMark);

            GetContainerItems(data[0].HouseBLId,BLcount);
        }
    });
}

/*============================= Main Model Biding ============================*/
$(function(){
    koMM = new ManifestModel()
    ko.applyBindings(koMM);
})


@*On Scroll Sticky Header CSS*@
    //window.onscroll = function() {myFunction()};
    //var header = document.getElementById("myHeader");
    //var sticky = header.offsetTop;
    //function myFunction() {
    //    if (window.pageYOffset > sticky) {
    //        header.classList.add("sticky");
    //    } else {
    //        header.classList.remove("sticky");
    //    }
    //}
</script>


<script>
    document.addEventListener("DOMContentLoaded", function() {
        flatpickr("#dateTimeDeparture", {
            enableTime: true,
            dateFormat: "d/m/Y H:i",
            altInput: true,
            altFormat: "d/m/Y H:i",
            time_24hr: true,
        });

        flatpickr("#dateTimeArrival", {
            enableTime: true,
            dateFormat: "d/m/Y H:i",
            altInput: true,
            altFormat: "d/m/Y H:i",
            time_24hr: true,
        });
    });
</script>