@{
    ViewBag.Title = "Contacts";
}

<div class="min-h-screen bg-gray-100 p-6">
    <h2 class="text-2xl font-bold text-gray-800 mb-6">Contacts</h2>

    <!-- Search Section -->
    <div class="bg-white p-4 rounded-lg shadow mb-6">
        <div class="flex flex-wrap gap-4">
            <div class="flex-grow">
                <label class="text-sm font-medium text-gray-700 mb-1 block">Search</label>
                <input type="text" id="searchQuery" class="w-full px-3 py-2 border border-gray-300 rounded focus:ring-blue-500 focus:border-blue-500" placeholder="Search by Name, Reg No, or Contact" />
            </div>
            <div class="flex items-end gap-2">
                <button id="searchBtn" class="w-10 h-10 rounded-full bg-blue-500 text-white rounded shadow hover:bg-blue-600 focus:outline-none">
                    <i class="fas fa-search"></i>
                </button>
                <button id="resetSearch" class="w-10 h-10 rounded-full bg-gray-500 text-white rounded shadow hover:bg-gray-600 focus:outline-none">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Cards Section -->
    <div id="contactsCards" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-6 mb-6">
        <!-- Cards will be dynamically injected here -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="flex justify-center space-x-2">
        <!-- Pagination buttons will be dynamically injected here -->
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        const itemsPerPage = 10;
        const maxVisiblePages = 5;
        let currentPage = 1;
        let contactsData = []; // Store all fetched contacts
        let filteredData = []; // Store filtered contacts

        // Fetch all contacts on load
        fetchContacts();

        // Search button click event
        $('#searchBtn').on('click', function () {
            const query = $('#searchQuery').val().trim().toLowerCase();
            if (query) {
                // Filter contactsData locally
                filteredData = contactsData.filter(contact =>
                    (contact.Name && contact.Name.toLowerCase().includes(query)) ||
                    (contact.RegNo && contact.RegNo.toLowerCase().includes(query)) ||
                    (contact.Contact && contact.Contact.toLowerCase().includes(query))
                );
            } else {
                // If no query, show all contacts
                filteredData = [...contactsData];
            }
            currentPage = 1; // Reset to first page
            renderContacts(currentPage);
            renderPagination(filteredData.length, itemsPerPage);
        });

        // Reset button click event
        $('#resetSearch').on('click', function () {
            $('#searchQuery').val('');
            filteredData = [...contactsData]; // Reset to all contacts
            currentPage = 1; // Reset to first page
            renderContacts(currentPage);
            renderPagination(filteredData.length, itemsPerPage);
        });

        // Fetch contacts from the backend
        function fetchContacts() {
            $.ajax({
                url: '/Party/GetContacts', // Adjust the URL as needed
                type: 'GET',
                success: function (response) {
                    console.log('Fetched Data:', response);
                    if (response && response.aaData) {
                        contactsData = response.aaData;
                        filteredData = [...contactsData]; // Initialize filteredData
                        renderContacts(currentPage);
                        renderPagination(filteredData.length, itemsPerPage);
                    } else {
                        $('#contactsCards').html('<p class="text-red-500">No contacts found.</p>');
                    }
                },
                error: function () {
                    $('#contactsCards').html('<p class="text-red-500">Failed to load contacts.</p>');
                }
            });
        }

        // Render contacts as cards
        function renderContacts(page) {
            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const visibleContacts = filteredData.slice(startIndex, endIndex);

            const container = $('#contactsCards');
            container.empty();

            if (visibleContacts.length === 0) {
                container.html('<p class="text-gray-500">No contacts found.</p>');
                return;
            }

            visibleContacts.forEach(item => {
                const card = `
                    <div class="bg-white p-4 rounded-lg shadow hover:shadow-md transition">
                        <h3 class="text-lg font-bold text-gray-800 mb-2">${item.Name}</h3>
                        <p class="text-sm text-gray-600"><strong>Type:</strong> ${item.PartyType}</p>
                        <p class="text-sm text-gray-600"><strong>Reg No:</strong> ${item.RegNo}</p>
                        <p class="text-sm text-gray-600"><strong>Address:</strong> ${item.Address1}</p>
                        <p class="text-sm text-gray-600"><strong>Contact:</strong> ${item.Contact}</p>
                        <div class="mt-4 flex gap-2">
                            <button onclick="editParty(${item.Id})" class="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600" title="Edit">
                                <i class="fas fa-edit"></i>
                            </button>
                        </div>
                    </div>
                `;
            container.append(card);
        });
    }

        // Render pagination controls with dots
    function renderPagination(totalItems, itemsPerPage) {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const paginationContainer = $('#pagination');
        paginationContainer.empty();

        if (totalPages <= 1) return;

        let paginationHtml = '';

        // Previous button
        paginationHtml += `<button onclick="changePage(${currentPage - 1})" class="px-4 py-2 rounded ${currentPage === 1 ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === 1 ? 'disabled' : ''}>
            <i class="fas fa-chevron-left"></i>
        </button>`;

        // Page buttons with dots
        for (let i = 1; i <= totalPages; i++) {
            if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                paginationHtml += `
                    <button onclick="changePage(${i})" class="px-4 py-2 rounded ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 hover:bg-gray-300'}">
                        ${i}
    </button>`;
    } else if (i === currentPage - 3 || i === currentPage + 3) {
        paginationHtml += `<span class="px-2 py-1">...</span>`;
    }
    }

    // Next button
    paginationHtml += `<button onclick="changePage(${currentPage + 1})" class="px-4 py-2 rounded ${currentPage === totalPages ? 'bg-gray-300' : 'bg-gray-200 hover:bg-gray-300'}" ${currentPage === totalPages ? 'disabled' : ''}>
        <i class="fas fa-chevron-right"></i>
    </button>`;

    paginationContainer.html(paginationHtml);
    }

    // Change the page
    window.changePage = function (page) {
        if (page < 1 || page > Math.ceil(filteredData.length / itemsPerPage)) return;
        currentPage = page;
        renderContacts(page);
        renderPagination(filteredData.length, itemsPerPage);
    };

    // Edit party function
    window.editParty = function (id) {
        console.log(`Edit party with ID: ${id}`);
        // Add your edit logic here
    };
    });
</script>



